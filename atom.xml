<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daily Javascript</title>
    <atom:link href="http://daily-javascript.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://daily-javascript.com</link>
    <description>For your daily dose of Javascript libraries.</description>
    <pubDate>Wed, 27 Jan 2016 01:00:00 +0100</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>MarsDB</title>
      <link>http://daily-javascript.com/articles/marsdb/</link>
      <pubDate>Wed, 27 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/marsdb/</guid>
      <author></author>
      <description>&lt;p&gt;MarsDB (GitHub: &lt;a href=&quot;https://github.com/c58/marsdb&quot;&gt;c58/marsdb&lt;/a&gt;, License: MIT, npm: mardb)&lt;/p&gt;
&lt;p&gt;MarsDB is a very lightweight client-side database.
It is inspired by a Meteor’s &lt;a href=&quot;https://atmospherejs.com/meteor/minimongo&quot;&gt;minimongo&lt;/a&gt; matching/modifying implementation.
The library has a Promise based interface and can be backed with any storage implementation such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In-memory storage (built-in default)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/c58/marsdb-localforage&quot;&gt;LocalForage storage&lt;/a&gt; – fastest in-browser storage (InexedDB, WebSQL and fallback to localStorage)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/c58/marsdb-localstorage&quot;&gt;LocalStorage storage&lt;/a&gt; – not recommended, better prefer LocalForage&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/c58/marsdb-levelup&quot;&gt;LevelUP storage&lt;/a&gt; – lightweight server-less Node.js storage&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/c58/marsdb-mongo&quot;&gt;MongoDB wrapper&lt;/a&gt; – use MarsDB for comfortable work with MongoDB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides all of this MarsDB supports observable cursors which is very nice addition to the toolbelt.
The database supports any kind of find/update/remove operations that Meteor’s minimongo would also support.
When you need a reference on how theses queries work go to the Meteor docs for supported &lt;a href=&quot;https://atmospherejs.com/meteor/minimongo&quot;&gt;query/modifier operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s first create a collection of &lt;code&gt;posts&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Collection &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'marsdb'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LocalStorageManager &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'marsdb-localstorage'&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Setup different id generator and storage managers&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// Default storage is in-memory&lt;/span&gt;
Collection.defaultStorageManager(LocalStorageManager);
Collection.defaultIdGenerator(() =&amp;gt; {
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    value: &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random(),
    seed: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
  };
});

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; posts = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Collection(&lt;span class=&quot;string&quot;&gt;'posts'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can populate it with some data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// To insert one&lt;/span&gt;
posts.insert({text: &lt;span class=&quot;string&quot;&gt;'MarsDB is awesome'&lt;/span&gt;}).then(docId =&amp;gt; {
  &lt;span class=&quot;comment&quot;&gt;// Invoked after persisting document&lt;/span&gt;
});

&lt;span class=&quot;comment&quot;&gt;// To insert a bulk&lt;/span&gt;
posts.insertAll(
  {text: &lt;span class=&quot;string&quot;&gt;'MarsDB'&lt;/span&gt;},
  {text: &lt;span class=&quot;string&quot;&gt;'is'&lt;/span&gt;},
  {text: &lt;span class=&quot;string&quot;&gt;'awesome'&lt;/span&gt;}
).then(docsIds =&amp;gt; {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt;&amp;gt;'&lt;/span&gt;, docsIds);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can retrieve one of the saved item like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;posts.find({text: &lt;span class=&quot;string&quot;&gt;'MarsDB'&lt;/span&gt;})
  .sort([&lt;span class=&quot;string&quot;&gt;'createdAt'&lt;/span&gt;])
  .then(docs =&amp;gt; {
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'--&amp;gt;&amp;gt;'&lt;/span&gt;, docs);
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more in depth examples and documentation check the &lt;a href=&quot;https://github.com/c58/marsdb&quot;&gt;README file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A small reminder to challenge yourself. This week we will be focusing on transferring knowledge using the &lt;a href=&quot;http://daily-javascript.com/articles/workshopper&quot;&gt;workshopper framework&lt;/a&gt; head over to the &lt;a href=&quot;http://daily-javascript.com/challenges/workshopper&quot;&gt;challenge page&lt;/a&gt; for more details.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Preact</title>
      <link>http://daily-javascript.com/articles/preact/</link>
      <pubDate>Tue, 26 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/preact/</guid>
      <author></author>
      <description>&lt;p&gt;Preact (GitHub: &lt;a href=&quot;https://github.com/developit/preact&quot;&gt;developit/preact&lt;/a&gt;, License: MIT, npm: preact)&lt;/p&gt;
&lt;p&gt;Preact is an attempt to recreate the core value proposition of React using as little code as possible.
It is far to say that the developers succeeded in this, since it’s only around 3kb when minified and gzipped.&lt;/p&gt;
&lt;p&gt;The library retains a large amount of compatibility with React. Note that only the &lt;a href=&quot;https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#stateless-functional-components&quot;&gt;stateless functional components&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/docs/reusable-components.html#es6-classes&quot;&gt;ES6 Classes interface&lt;/a&gt; are available for use.&lt;/p&gt;
&lt;p&gt;It already has a few add-ons such as &lt;a href=&quot;http://git.io/preact-router&quot;&gt;a router&lt;/a&gt;, &lt;a href=&quot;http://git.io/preact-render-to-string&quot;&gt;an universal renderer&lt;/a&gt; and &lt;a href=&quot;https://github.com/developit/preact-compat&quot;&gt;a compatibility layer for other React modules&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A full list of demo’s, add-ons and libraries can be found on the &lt;a href=&quot;http://developit.github.io/preact/&quot;&gt;Github Page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s take a look on how we work with it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// import the stuff we want to use&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { h, render, Component } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'preact'&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Tell Babel to transform JSX into h() calls:&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/** @jsx h */&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;{
    render() {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;My Super Awesome App&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;
    }
}

&lt;span class=&quot;comment&quot;&gt;// render an instance of App into &amp;lt;body&amp;gt;:&lt;/span&gt;
render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;, document.body);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see it’s very similar to React but only 3kb.
It comes with the same set of lifecycle events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;componentDidMount&lt;/li&gt;
&lt;li&gt;componentWillUnmount&lt;/li&gt;
&lt;li&gt;componentDidUnmount&lt;/li&gt;
&lt;li&gt;componentWillReceiveProps&lt;/li&gt;
&lt;li&gt;shouldComponentUpdate&lt;/li&gt;
&lt;li&gt;componentWillUpdate&lt;/li&gt;
&lt;li&gt;componentDidUpdate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more examples check the &lt;a href=&quot;https://github.com/developit/preact-compat&quot;&gt;README&lt;/a&gt; or the &lt;a href=&quot;http://developit.github.io/preact/&quot;&gt;Github Page&lt;/a&gt; where you can find some amazing examples posted by the developer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Pressure</title>
      <link>http://daily-javascript.com/articles/pressure/</link>
      <pubDate>Mon, 25 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/pressure/</guid>
      <author></author>
      <description>&lt;p&gt;Pressure (GitHub: &lt;a href=&quot;https://github.com/yamartino/pressure&quot;&gt;yamartino/pressure&lt;/a&gt;, License: MIT, npm: pressure)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/ff9a4c42ce2565fd1ef4e2b55ebcd0e9028d6961/687474703a2f2f79616d617274696e6f2e6769746875622e696f2f70726573737572652f70726573737572652e676966&quot; style=&quot; width: 100%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pressure is a library which makes dealing with Apple’s “Force Touch” and “3D Touch” simpler.
At the time of writing this update the support for Force Touch was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iPhone 6s&lt;/li&gt;
&lt;li&gt;iPhone 6s Plus&lt;/li&gt;
&lt;li&gt;MacBook 2015&lt;ul&gt;
&lt;li&gt;13” MacBook Pro 2015&lt;/li&gt;
&lt;li&gt;15” MacBook Pro 2015&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Magic Trackpad 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And sadly it only works inside Safari.
The developer has let us know that when there are more devices or browsers to support, that it will also be supported by Pressure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future devices and browser that support force will be added when they come out&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The library is constructed in a way that Force Touch for new Macs and 3D Touch for the new iPhone 6s and 6s Plus are all bundled under one roof with a simple API. By example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Pressure = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'pressure'&lt;/span&gt;);

Pressure.set(&lt;span class=&quot;string&quot;&gt;'#myAwesomeElement'&lt;/span&gt;, {
    change: (force) =&amp;gt; {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.innerHTML = force;
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this will do is render the “amount” of pressure put on &lt;code&gt;#myAwesomeElement&lt;/code&gt;.
The rest of the API is just as straight forward.
Use &lt;code&gt;end&lt;/code&gt; to know when the user has stopped putting pressure on your awesome element.
&lt;code&gt;startDeepPress&lt;/code&gt; to know if the user is applying deep pressure and &lt;code&gt;endDeepPress&lt;/code&gt; to know when it stopped.
And as a curtesy there is &lt;code&gt;unsupported&lt;/code&gt; which tell’s you if Force Touch is available.&lt;/p&gt;
&lt;p&gt;If you want to know more head over to the &lt;a href=&quot;http://yamartino.github.io/pressure/&quot;&gt;Github Page&lt;/a&gt; and check the &lt;a href=&quot;http://yamartino.github.io/pressure/&quot;&gt;documentation&lt;/a&gt;. The developer also implemented a very nice demo on that same page.&lt;/p&gt;
&lt;p&gt;Since it’s the first day of the week I would like to remind you to challenge yourself this week.
This weeks challenge is to create a workshop about a topic you care about or want to research.
The only way you can be sure of knowing something is when you can teach it to somebody else.&lt;/p&gt;
&lt;p&gt;Head over to the &lt;a href=&quot;http://daily-javascript.com/challenges/workshopper/&quot;&gt;Workshopper Challenge&lt;/a&gt; section for more details.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weekly Challenge - Workshopper</title>
      <link>http://daily-javascript.com/articles/weekly-challenge-2016-04/</link>
      <pubDate>Fri, 22 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/weekly-challenge-2016-04/</guid>
      <author></author>
      <description>&lt;p&gt;As first point of today here are &lt;a href=&quot;http://daily-javascript.com/challenges/tic-tac-toe/results&quot;&gt;last weeks results&lt;/a&gt;.
Sadly still not a lot of submissions. The submissions I did receive are amazing great work guys.
I am curious about the reason behind the low number of submissions, is this because the challenges are to hard?
Or because they are not challenging enough? Maybe you guys don’t like the topics. I do not know.
Please tell me if you have any ideas on how I can get you guys to work on challenging problems and you will have fun.&lt;/p&gt;
&lt;p&gt;For this weeks challenge I had a fun idea, but sadly I did not find the time this week to prepare it.
So that will have to wait for some other week. This week we are gonna think about how to transfer knowledge.&lt;/p&gt;
&lt;p&gt;Pick a topic which you feel comfortable with or something you find interesting and create a workshop for that topic.
You will be using the &lt;a href=&quot;https://github.com/workshopper/workshopper&quot;&gt;Workshopper&lt;/a&gt; framework which I mentioned &lt;a href=&quot;http://daily-javascript.com/articles/workshopper/&quot;&gt;this week&lt;/a&gt;.
For more detail on the challenge go to the &lt;a href=&quot;http://daily-javascript.com/challenges/workshopper&quot;&gt;challenge page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Mantra</title>
      <link>http://daily-javascript.com/articles/mantra/</link>
      <pubDate>Thu, 21 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/mantra/</guid>
      <author></author>
      <description>&lt;p&gt;Mantra (GitHub: &lt;a href=&quot;https://github.com/kadirahq/mantra&quot;&gt;kadirahq/mantra&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;Mantra is an application architecture for &lt;a href=&quot;https://www.meteor.com/&quot;&gt;Meteor&lt;/a&gt;.
If you are not familair with Meteor I would strongly advice you take a look at it.
The developers of Mantra try to achieve two main goals: High Maintainability and Future Proof.&lt;/p&gt;
&lt;p&gt;Maintainability is a key factor for success when working within large teams.
Mantra achieves this by unit testing every part of the app, while following standards for &lt;strong&gt;everything&lt;/strong&gt;. This makes it easy to add new users and work with teams.&lt;/p&gt;
&lt;p&gt;There is a very extensive spec of how a Mantra application would work which can be found &lt;a href=&quot;https://kadirahq.github.io/mantra/&quot;&gt;here&lt;/a&gt;.
I really like this approach, ‘cause it combines the best parts of all the new and shiny stuff out there.&lt;/p&gt;
&lt;p&gt;Today is the last day you can submit your solution for the &lt;a href=&quot;http://daily-javascript.com/challenges/tic-tac-toe/&quot;&gt;weekly challenge&lt;/a&gt;. Next weeks challenge will be up tomorrow so make sure you check back then to see what I have in store for you next.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Workshopper</title>
      <link>http://daily-javascript.com/articles/workshopper/</link>
      <pubDate>Wed, 20 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/workshopper/</guid>
      <author></author>
      <description>&lt;p&gt;Workshopper (GitHub: &lt;a href=&quot;https://github.com/workshopper/workshopper&quot;&gt;workshopper/workshopper&lt;/a&gt;, License: MIT, npm: workshopper)&lt;/p&gt;
&lt;p&gt;Workshopper is a terminal workshop runner framework. It gives you the tools to create workshops and exercises which can be run from any terminal.
Which is a great thing if you are teaching people how are still scared of the terminal. This way they will practice their programming skills and develop a sense of comfort on the command line.&lt;/p&gt;
&lt;p&gt;Workshopper is being used by code schools like “&lt;a href=&quot;https://github.com/workshopper/learnyounode&quot;&gt;Learn You Node&lt;/a&gt;“ and &lt;a href=&quot;http://nodeschool.io/&quot;&gt;Nodeschool.io&lt;/a&gt;. I came across a Hapi.js exercise as well, which made me think why not have an interactive introduction to your framework.&lt;/p&gt;
&lt;p&gt;The framework is essentially a test-runner with a very fancy terminal UI.
The &lt;code&gt;workshopper&lt;/code&gt; package is largely concerned with the menu system and some basic command-line parsing but much of the work for executing the exercise validation is handled by &lt;a href=&quot;http://github.com/rvagg/workshopper-exercise&quot;&gt;workshopper-exercise&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really like this project because it’s a nice and quick way to really get into how something works. For instance &lt;a href=&quot;https://github.com/timoxley/functional-javascript-workshop&quot;&gt;this workshop on functional Javascript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you did not submit you solution to this weeks challenge, creating Tic Tac Toe, I’d advice you to get a move on it because there is only day remaining. If you need to refresh you memory on the challenge head over to &lt;a href=&quot;http://daily-javascript.com/challenges/tic-tac-toe/&quot;&gt;the challenge page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Nodal</title>
      <link>http://daily-javascript.com/articles/nodal/</link>
      <pubDate>Mon, 18 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/nodal/</guid>
      <author></author>
      <description>&lt;p&gt;Nodal (GitHub: &lt;a href=&quot;https://github.com/keithwhor/nodal&quot;&gt;keithwhor/nodal&lt;/a&gt;, License: MIT, npm: nodal)&lt;/p&gt;
&lt;p&gt;Nodal is a web server and API framework for Node.js. It is built upon an ideology of a robust, scalable microservice architecture.
It borrows a lot from &lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Rails&lt;/a&gt; and &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt; so working with the framework made me feel right at home since I used to do a lot of Rails.
With familiar commands such as: &lt;code&gt;nodal db:migrate&lt;/code&gt;, &lt;code&gt;nodal g:controller&lt;/code&gt; et cetra.&lt;/p&gt;
&lt;p&gt;One of the features that really blew me away was how a scaffold CRUD handles query parameters.
It uses the &lt;code&gt;.where(this.params.query)&lt;/code&gt; where the query params will be applied as a filter.
Which uses a very similar syntax as the &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/topics/db/queries/#retrieving-specific-objects-with-filters&quot;&gt;filter methods in Django’s ORM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The framework is configured to use &lt;a href=&quot;http://www.postgresql.org/&quot;&gt;Postgresql&lt;/a&gt; as a database, which is a great idea in my opinion.
Especially since the framework tries to aim at developer who want a little more guidance in their development process to get familiar with Node.js and the Javascript eco system in general.&lt;/p&gt;
&lt;p&gt;The developer &lt;a href=&quot;https://youtu.be/IxBXkFbUqtk&quot;&gt;posted a screencast&lt;/a&gt; of him setting up a very simple twitter clone which I recommend you watch.&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/IxBXkFbUqtk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;And there will be more screencast’s in the future. This will definitely be part of the next API I’m gonna build.&lt;/p&gt;
&lt;p&gt;Don’t forget to challenge your self this week. There is still a challenge running which is &lt;a href=&quot;http://daily-javascript.com/challenges/tic-tac-toe/&quot;&gt;Make Tic Tac Toe in Javascript&lt;/a&gt; but make sure you submit it before Friday is you want it to be shown in the weekly results.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weekly Challenge - Tic tac toe</title>
      <link>http://daily-javascript.com/articles/weekly-challenge-2016-03/</link>
      <pubDate>Fri, 15 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/weekly-challenge-2016-03/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img style=&quot;width: 100%; display:block;&quot; src=&quot;http://i.imgur.com/AMfBBzl.png&quot; &gt;&lt;/p&gt;
&lt;p&gt;First of all here is a link to &lt;a href=&quot;http://daily-javascript.com/challenges/mandelbrot/results&quot;&gt;last weeks results&lt;/a&gt; sadly the challenge was a bit to hard, so I heard in some direct feedback. So I will switch it up this week.
No more fractals this time. This weeks challenge is create a Tic Tac Toe game using Javascript.&lt;/p&gt;
&lt;p&gt;You can go two ways for this implementation.&lt;/p&gt;
&lt;p&gt;The first one would be very naive. Simply switch between 2 users, the first user would be X the other would be O.
The program should be able to detect when one of the players has won or if it is a tie.&lt;/p&gt;
&lt;p&gt;If you are feeling very confident implement AI for player O. Same rules would apply.
Be mindful in your implementation because next week there will come some additional requirements.&lt;/p&gt;
&lt;p&gt;Again I’ve created &lt;a href=&quot;http://codepen.io/DailyJavascript/pen/ZQXBaK&quot;&gt;a Codepen for you to start with&lt;/a&gt;.
Please submit your solution to this &lt;a href=&quot;http://goo.gl/forms/vM1b4oUXC6&quot;&gt;Google Form&lt;/a&gt; and happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ChakraCore and 10 years of jQuery</title>
      <link>http://daily-javascript.com/articles/chakracore-and-10-years-jquery/</link>
      <pubDate>Thu, 14 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/chakracore-and-10-years-jquery/</guid>
      <author></author>
      <description>&lt;p&gt;ChakraCore (GitHub: &lt;a href=&quot;https://github.com/Microsoft/ChakraCore&quot;&gt;Microsoft/ChakraCore&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;In case you did not see or hear it yet, Microsoft has open sourced the ChakraCore.
ChakraCore is the Javascript engine that powers Microsoft Edge.&lt;/p&gt;
&lt;p&gt;The ChakraCore repository provides a fully supported and open-source standalone JavaScript engine, with the same  as the Microsoft Edge’s Chakra engine, to embed within your projects.&lt;/p&gt;
&lt;p&gt;For more in depth information I would refer you to the &lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/01/13/chakracore-now-open/&quot;&gt;official post by Microsoft&lt;/a&gt;. When you don’t feel like reading that, just watch this &lt;a href=&quot;https://youtu.be/1bfDB3YPHFI&quot;&gt;announcement video&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/1bfDB3YPHFI&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Besides the great news coming from Microsoft, jQuery has a special day to celebrate. The ten year existence of the most used library on the web.
The first release was at 14th of January 2006. Since then it has changed a lot and helped evolve the web to the great platform it is nowadays.&lt;/p&gt;
&lt;p&gt;Go over to the &lt;a href=&quot;http://blog.jquery.com/2016/01/14/ten-years-of-jquery-and-beyond/&quot;&gt;jQuery blog&lt;/a&gt; to read a little bit about the journey to today.&lt;/p&gt;
&lt;p&gt;Don’t forget to submit your implementation of this weeks challenge. If you need a refresher on what the assignment was head over the &lt;a href=&quot;http://daily-javascript.com/challenges/mandelbrot/&quot;&gt;challenge page&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Feature.js</title>
      <link>http://daily-javascript.com/articles/featurejs/</link>
      <pubDate>Wed, 13 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/featurejs/</guid>
      <author></author>
      <description>&lt;p&gt;Feature.js (GitHub: &lt;a href=&quot;https://github.com/viljamis/feature.js/&quot;&gt;viljamis/feature.js&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;Feature.js is a very fast, simple and lightweight browser feature detection library. I received this from a ex-colleage of mine and I was amazed I did not stumble upon this before, since it has more than 1200 stars on Github.
There are several features you can test with this library, here is a list of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddEventListener&lt;/li&gt;
&lt;li&gt;Async attribute&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;li&gt;ClassList API&lt;/li&gt;
&lt;li&gt;CORS API&lt;/li&gt;
&lt;li&gt;Context Menu&lt;/li&gt;
&lt;li&gt;CSS 3D transform&lt;/li&gt;
&lt;li&gt;CSS transform&lt;/li&gt;
&lt;li&gt;CSS transition&lt;/li&gt;
&lt;li&gt;Defer attribute&lt;/li&gt;
&lt;li&gt;DeviceOrientation&lt;/li&gt;
&lt;li&gt;DeviceMotion&lt;/li&gt;
&lt;li&gt;Geolocation&lt;/li&gt;
&lt;li&gt;History API&lt;/li&gt;
&lt;li&gt;Input Placeholder&lt;/li&gt;
&lt;li&gt;LocalStorage&lt;/li&gt;
&lt;li&gt;MatchMedia&lt;/li&gt;
&lt;li&gt;Picture element&lt;/li&gt;
&lt;li&gt;QuerySelectorAll&lt;/li&gt;
&lt;li&gt;REM Units&lt;/li&gt;
&lt;li&gt;Service Worker&lt;/li&gt;
&lt;li&gt;Sizes attribute&lt;/li&gt;
&lt;li&gt;Srcset attribute&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;li&gt;Touch&lt;/li&gt;
&lt;li&gt;Viewport Units&lt;/li&gt;
&lt;li&gt;WebGL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the tests it uses are pretty straight forward I will not go into this al to much. The most used test is done by simply checking if the requested feature is within the object in needs to be in.&lt;/p&gt;
&lt;p&gt;You use it with simple &lt;code&gt;if&lt;/code&gt; statements like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (feature.webGL) {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'WebGL supported'&lt;/span&gt;);
} &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'WebGL not supported'&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to see it in action head over to the &lt;a href=&quot;http://featurejs.com/&quot;&gt;project page&lt;/a&gt; where the developer has implemented a nice demo.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Catbee</title>
      <link>http://daily-javascript.com/articles/catbee/</link>
      <pubDate>Tue, 12 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/catbee/</guid>
      <author></author>
      <description>&lt;p&gt;Catbee (GitHub: &lt;a href=&quot;https://github.com/markuplab/catbee&quot;&gt;markuplab/catbee&lt;/a&gt;, License: MIT, npm: little-loader)&lt;/p&gt;
&lt;p&gt;&lt;p style=&quot;text-align: center; display: block;&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/markuplab/catbee-todomvc/master/logo.png&quot; style=&quot;max-width: 300px; width: 100%;&quot;&gt;
&lt;/p&gt;
Catbee is an high level isomorphic framework inspired and based on best practices from &lt;a href=&quot;https://github.com/catberry/catberry&quot;&gt;Catberry&lt;/a&gt;, &lt;a href=&quot;https://github.com/Yomguithereal/baobab&quot;&gt;Baobab&lt;/a&gt; and &lt;a href=&quot;https://github.com/cerebral/cerebral&quot;&gt;Cerebral&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Catbee is Catberry little brother. Unlike Catberry, Catbee use “Single State Tree” conception.
All state mutations run in signals, and powered by the &lt;a href=&quot;https://github.com/markuplab/appstate&quot;&gt;AppState&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;All data focused in Baobab tree, instead of distributed flux stores. The tree contains the full application state, and it has 2 interfaces: modify API also known as “Signals”, and read API also known as “Watchers”.&lt;/p&gt;
&lt;p&gt;Signal is the only way to modify state tree. It looks like middleware, but it is way more flexible and adopted for sync/async operations.
If you want to learn more about signals, checkout &lt;a href=&quot;http://cerebraljs.com/&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://github.com/markuplab/appstate&quot;&gt;this&lt;/a&gt;.
The developers recommend running signal on each user action, when you need change application state, and also signal automatically run on every url change.&lt;/p&gt;
&lt;p&gt;Signals use composition conception, and contains an array of independent functions. It’s very simple way to maintain big codebase. Here is an example of a Signal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; signal = [
  setLoading, &lt;span class=&quot;comment&quot;&gt;// Sync function&lt;/span&gt;
  [ &lt;span class=&quot;comment&quot;&gt;// Here we run parallel functions&lt;/span&gt;
    getUser, { &lt;span class=&quot;comment&quot;&gt;// Async function with 2 outputs success and error&lt;/span&gt;
      success: [setUser], &lt;span class=&quot;comment&quot;&gt;// Run if we call output.success in getUser&lt;/span&gt;
      error: [setUserError] &lt;span class=&quot;comment&quot;&gt;// Run if we call output.error in getUser&lt;/span&gt;
    },
    getNews, { &lt;span class=&quot;comment&quot;&gt;// It's function will run parallel with getUser, like Promise.all&lt;/span&gt;
      loaded: [setNews],
      error: [setNewsError]
    }
  ],
  unsetLoading
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Components can access data by &lt;a href=&quot;https://github.com/Yomguithereal/baobab#specialized-getters&quot;&gt;watchers&lt;/a&gt;. There are two main reasons you should use watchers. You’ll need data context for template rendering, and you’ll also need state update events to rerender your component.
You do not need bind watchers manually, it’s inside of Catbee.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Here we use simple Baobab.watch API&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = {
  news: [&lt;span class=&quot;string&quot;&gt;'news'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;],
  isVisible: [&lt;span class=&quot;string&quot;&gt;'news'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'UIState'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'isVisible'&lt;/span&gt;]
};

&lt;span class=&quot;comment&quot;&gt;// You can also use Baobab.watch dynamicly&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;attributes&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// Here attributes is &amp;lt;cat-component id=&quot;unique&quot; cat-id=&quot;1&quot; watcher= &quot;dynamic&quot;&amp;gt;&amp;lt;/cat-component&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = attributes[&lt;span class=&quot;string&quot;&gt;'cat-id'&lt;/span&gt;];

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
    title: [&lt;span class=&quot;string&quot;&gt;'news'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;, { id: id }, &lt;span class=&quot;string&quot;&gt;'title'&lt;/span&gt;]
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I really like this library because of my associations with Baobab. My first encounter with it was via the post &lt;a href=&quot;http://christianalfoni.github.io/javascript/2015/02/06/plant-a-baobab-tree-in-your-flux-application.html&quot;&gt;“Plant a Baobab tree in your flux application”&lt;/a&gt; which was written by &lt;a href=&quot;https://twitter.com/christianalfoni&quot;&gt;Christian Alfoni&lt;/a&gt;. It lead me to think differently about flux and redux, I recommend you read it.&lt;/p&gt;
&lt;p&gt;Don’t forget to challenge yourself this week. I prepared another weekly challenge which is: &lt;a href=&quot;http://daily-javascript.com/challenges/mandelbrot/&quot;&gt;“Implement the Mandelbrot set using Javascript”&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Little Loader</title>
      <link>http://daily-javascript.com/articles/little-loader/</link>
      <pubDate>Mon, 11 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/little-loader/</guid>
      <author></author>
      <description>&lt;p&gt;Little Loader (GitHub: &lt;a href=&quot;https://github.com/walmartlabs/little-loader&quot;&gt;walmartlabs/little-loader&lt;/a&gt;, License: MIT, npm: little-loader)&lt;/p&gt;
&lt;p&gt;Little Loader is a lightweight JavaScript loader which is advertised as “The Only Correct Script Loader Ever Made”.
It was developed by &lt;a href=&quot;http://formidable.com&quot;&gt;Formidable&lt;/a&gt; for a project they did for Mallmart.&lt;/p&gt;
&lt;p&gt;The need for this library grew from the lack of browser support for the which the team needed.
To give an example look at the overview made by the team.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/600/1*NUr1sQqkxQ8mdAcrWWLvjg.png&quot; alt=&quot;https://cdn-images-1.medium.com/max/600/1*NUr1sQqkxQ8mdAcrWWLvjg.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’m already using it in one of my projects because after watching the introduction video I was convinced this is the best library for dynamically loading remote JavaScript files.&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/F080X3Tp6_8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;So how do we work with it?
First of all make use it is installed by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm i little-loader -S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can require it within our app like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; load = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;little-loader&quot;&lt;/span&gt;);

load(&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/foo.js&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;// .. This is where you continue with your app.&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all actually. There are multiple ways to include Little Loader. You can get it from a CDN, from npm and it is compatible with AMD loaders such as RequireJS.&lt;/p&gt;
&lt;p&gt;When including Little Loader via a normal script tag, it will attach it self to the &lt;code&gt;window&lt;/code&gt; Object and can be accessed via &lt;code&gt;window._lload&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;._lload(&lt;span class=&quot;string&quot;&gt;&quot;http://example.com/foo.js&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// .. Your code....&lt;/span&gt;
  });
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Weekly Challenge Week 2</title>
      <link>http://daily-javascript.com/articles/weekly-challenge-2016-02/</link>
      <pubDate>Fri, 08 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/weekly-challenge-2016-02/</guid>
      <author></author>
      <description>&lt;p&gt;It’s Friday again, which means no new library today, but to make up for it I think I chose a really nice challenge. The Mandelbrot set.
Some of you guys are probably familiar with it already from school or as a performance test.&lt;/p&gt;
&lt;p&gt;I came across this problem just recently when I was looking at the &lt;a href=&quot;http://daily-javascript.com/articles/bigfloat/&quot;&gt;bigfloat&lt;/a&gt; library.
The developer included it as a performance demo and it got my interest because of &lt;a href=&quot;http://benchmarksgame.alioth.debian.org/u64q/performance.php?test=mandelbrot&quot;&gt;“The Computer Language Benchmarks Game”&lt;/a&gt;. Where it is listed as one of the benchmarks challenges.&lt;/p&gt;
&lt;p&gt;For details on the challenge go to the &lt;a href=&quot;http://daily-javascript.com/challenges/mandelbrot&quot;&gt;challenge page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The results will be up next Friday so make sure you have submitted your implementation before then.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>NuclearJS</title>
      <link>http://daily-javascript.com/articles/nuclear-js/</link>
      <pubDate>Thu, 07 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/nuclear-js/</guid>
      <author></author>
      <description>&lt;p&gt;NuclearJS (GitHub: &lt;a href=&quot;https://github.com/optimizely/nuclear-js&quot;&gt;optimizely/nuclear-js&lt;/a&gt;, License: MIT, npm: nuclear-js)&lt;/p&gt;
&lt;p&gt;NuclearJS is a reactive flux implementation build with &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;ImmutableJS&lt;/a&gt; data structures.
It has been developed by &lt;a href=&quot;https://www.optimizely.com/&quot;&gt;Optimizely&lt;/a&gt;, which is a company that provides A/B testing suite and more as a service.&lt;/p&gt;
&lt;p&gt;NuclearJS was designed first for large scale production apps. For a much more lightweight Flux implementation that shares many of the same ideas and design principles, as check out &lt;a href=&quot;https://github.com/vigetlabs/microcosm&quot;&gt;Microcosm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As we have seen many Flux implementations already we have grown skeptical about new implementations.
So that bears the question: “How NuclearJS differs from other Flux implementations?”.&lt;/p&gt;
&lt;p&gt;Well all app state is in a singular immutable map. In development you can see your entire application state at every point in time thanks to awesome debugging tools built into NuclearJS.&lt;/p&gt;
&lt;p&gt;State is not spread out through stores, instead stores are a declarative way of describing some top-level domain of your app state. For each key in the app state map a store declares the initial state of that key and how that piece of the app state reacts over time to actions dispatched on the flux system.&lt;/p&gt;
&lt;p&gt;Stores are not reference-able nor have any getX methods on them. Instead NuclearJS uses a functional lens concept called getters. In fact, the use of getters obviates the need for any store to know about another store, eliminating the confusing store.waitsFor method found in other flux implementations.&lt;/p&gt;
&lt;p&gt;NuclearJS is insanely efficient - change detection granularity is infinitesimal, you can even observe computed state where several pieces of the state map are combined together and run through a transform function. NuclearJS is smart enough to know when the value of any computed changes and only call its observer if and only if its value changed in a way that is orders of magnitude more efficient than traditional dirty checking. It does this by leveraging ImmutableJS data structure and using a state1 !== state2 reference comparison which runs in constant time.&lt;/p&gt;
&lt;p&gt;Automatic data observation / rendering – automatic re-rendering is built in for React in the form of a very lightweight mixin. It is also easily possible to build the same functionality for any UI framework such as VueJS, AngularJS and even Backbone.&lt;/p&gt;
&lt;p&gt;NuclearJS is not a side-project, it’s used as the default Flux implementation that powers all of Optimizely. It is well tested and will continue to be maintained for the foreseeable future. Our current codebase has over dozens of stores, actions and getters, we even share our prescribed method of large scale code organization and testing strategies.&lt;/p&gt;
&lt;p&gt;For examples I would refer you to &lt;a href=&quot;https://optimizely.github.io/nuclear-js/&quot;&gt;project homepage&lt;/a&gt; because there you can find better explaintions than I can give it in my daily posts.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Happy new year</title>
      <link>http://daily-javascript.com/articles/happy-new-year/</link>
      <pubDate>Wed, 06 Jan 2016 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/happy-new-year/</guid>
      <author></author>
      <description>&lt;p&gt;First of all let me say Happy new year! The last couple of weeks I did not do any posted due to all the celebrations and illness.
Luckily the holiday season is over and we can get back to creating and learning to make beautiful applications.
Something some people might be interested in is the results of the latest challenge which was &lt;a href=&quot;http://daily-javascript.com/challenges/let-it-snow&quot;&gt;“Let it snow”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Well sadly I only received two submissions. Which let me to believe people did not feel challenged by this assignment. I will do my best to find something more interesting.
The results can be found on the results page of the challenge which would be &lt;a href=&quot;http://daily-javascript.com/challenges/let-it-snow/results&quot;&gt;Daily-Javascript.com/challenges/let-it-snow/results&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From tomorrow on Daily-Javascript will be getting daily updates again. Hope you guys keep on reading.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weekly Challenge Week 52</title>
      <link>http://daily-javascript.com/articles/weekly-challenge-2015-52/</link>
      <pubDate>Fri, 25 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/weekly-challenge-2015-52/</guid>
      <author></author>
      <description>&lt;p&gt;First of all let me say Merry Christmas! Last weeks challenge was a blast and I’d like to thanks everybody who submitted a solution.
To view the submitted solutions check the &lt;a href=&quot;http://daily-javascript.com/challenges/pythagoras-tree/results&quot;&gt;results section of the challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For this weeks challenge I wanted to something Christmas themed and came up with a lot of ideas, but since we can not spend the entire week working on the challenge I thought to go for something simple: Let it snow.&lt;/p&gt;
&lt;p&gt;An overview of the challenges can be found at &lt;a href=&quot;http://daily-javascript.com/challenges&quot;&gt;/challenges&lt;/a&gt;. For more details about this weeks challenge go to &lt;a href=&quot;http://daily-javascript.com/challenges/let-it-snow/&quot;&gt;Let it snow&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Shipit</title>
      <link>http://daily-javascript.com/articles/shipit/</link>
      <pubDate>Wed, 23 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/shipit/</guid>
      <author></author>
      <description>&lt;p&gt;Shipit (GitHub: &lt;a href=&quot;https://github.com/shipitjs/shipit&quot;&gt;shipitjs/shipit&lt;/a&gt;, License: MIT, npm: shipit)&lt;/p&gt;
&lt;p&gt;Shipit is an automation engine and a deployment tool written for Node.&lt;/p&gt;
&lt;p&gt;Shipit is an alternative for &lt;a href=&quot;http://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt;. If you are not familiar Capistrano, it is a remote server automation and deployment tool written in Ruby.
Since Capistrano was written in Ruby, you needed to be comfortable working in Ruby and be familiar with the tooling that comes with it.
Nowadays we are using Javascript for everything. Web servers, build tooling, bot’s you can even control a drone using Javascript.
So it makes sense to do deployment in Javascript as well.&lt;/p&gt;
&lt;p&gt;Shipit’s task structure is very similar to that of &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;. Since they are both based on &lt;a href=&quot;https://github.com/orchestrator/orchestrator&quot;&gt;orchestrator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Besides the main API for handling remote work, there is also a dedicated deploy package based on git and rsync commands.
With which you can deploy tag, branch or commit. Add additional behavior using hooks, build your project locally or remotely and you can do easy rollback.&lt;/p&gt;
&lt;p&gt;A simple &lt;code&gt;shipitfile.js&lt;/code&gt; would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;shipit&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'shipit-deploy'&lt;/span&gt;)(shipit);

  shipit.initConfig({
    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: {
      workspace: &lt;span class=&quot;string&quot;&gt;'/tmp/github-monitor'&lt;/span&gt;,
      deployTo: &lt;span class=&quot;string&quot;&gt;'/tmp/deploy_to'&lt;/span&gt;,
      repositoryUrl: &lt;span class=&quot;string&quot;&gt;'https://github.com/user/repo.git'&lt;/span&gt;,
      ignores: [&lt;span class=&quot;string&quot;&gt;'.git'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'node_modules'&lt;/span&gt;],
      rsync: [&lt;span class=&quot;string&quot;&gt;'--del'&lt;/span&gt;],
      keepReleases: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,
      key: &lt;span class=&quot;string&quot;&gt;'/path/to/key'&lt;/span&gt;,
      shallowClone: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
    },
    staging: {
      servers: &lt;span class=&quot;string&quot;&gt;'user@myserver.com'&lt;/span&gt;
    }
  });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CLI structure works like: &lt;code&gt;shipit &amp;lt;environment&amp;gt; &amp;lt;tasks ...&amp;gt;&lt;/code&gt;.
So with a &lt;code&gt;shipitfile.js&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;shipit staging deploy
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Siphon</title>
      <link>http://daily-javascript.com/articles/siphon/</link>
      <pubDate>Tue, 22 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/siphon/</guid>
      <author></author>
      <description>&lt;p&gt;Usually I only mention stuff that is on Github, but I came across a tool which makes my personal development process a lot better.
Sadly it’s not open source or at least not that I can tell. For now it’s still free, but eventually it will have a pricing. Do not think this is sponsored content, &lt;strong&gt;it is not&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So now you are probably curious what it’s all about. The tools is called &lt;a href=&quot;https://getsiphon.com/&quot;&gt;Siphon&lt;/a&gt; and what it does is make you not use Xcode for developing and deployment of React Native apps.&lt;/p&gt;
&lt;p&gt;The sandbox environment lets you create and test React Native apps without installing Xcode or Android Studio, which really amazed me.
This would mean that you do not need to be on an Apple system to develop for iOS and Android, but if you prefer working on &lt;a href=&quot;http://www.slackware.com/&quot;&gt;Slackware&lt;/a&gt; for instance, you can.
There is no Windows support &lt;em&gt;yet&lt;/em&gt;. If you were wondering, but the team is working on this.&lt;/p&gt;
&lt;p&gt;Because the project is still in alpha it is missing support for a lot of things, such as the entire Android platform, but they will be rolling out plenty more features over coming weeks.&lt;/p&gt;
&lt;p&gt;On the Siphon website are some wonderful tutorials on how to use their cli and sandbox. If I peaked your interest take a look at the &lt;a href=&quot;https://getsiphon.com/docs/quickstart/&quot;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Inspire Tree</title>
      <link>http://daily-javascript.com/articles/inspire-tree/</link>
      <pubDate>Mon, 21 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/inspire-tree/</guid>
      <author></author>
      <description>&lt;p&gt;Inspire Tree (GitHub: &lt;a href=&quot;https://github.com/helion3/inspire-tree&quot;&gt;helion3/inspire-tree&lt;/a&gt;, License: MIT, npm: inspire-tree)&lt;/p&gt;
&lt;p&gt;First of all I would like to thank everybody that took the time to look at the &lt;a href=&quot;http://daily-javascript.com/challenges&quot;&gt;Weekly Challenges&lt;/a&gt; over the weekend. If you have not looked at the challenge of last week you can still submit until Thursday night.&lt;/p&gt;
&lt;p&gt;Now to business, &lt;a href=&quot;https://github.com/viveleroi&quot;&gt;Mike Botsko&lt;/a&gt; sent in Inspire Tree which is a un-opinionated collapsable tree UI library.
The need for the library grew with the developers because the alternatives already out there where not extensive enough or just took to much hacking to make it listen to what they wanted.&lt;/p&gt;
&lt;p&gt;Some of the features that jumped out to me are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Events everywhere&lt;/li&gt;
&lt;li&gt;~40k minified, uncompressed&lt;/li&gt;
&lt;li&gt;No external dependencies&lt;/li&gt;
&lt;li&gt;Load data directly, via promises, callbacks, etc&lt;/li&gt;
&lt;li&gt;Load child nodes upfront or dynamically (or a mix of both)&lt;/li&gt;
&lt;li&gt;Tri-state checkboxes (optional)&lt;/li&gt;
&lt;li&gt;Multiselect (optional)&lt;/li&gt;
&lt;li&gt;Search by plain string, RegExp, custom matcher, or external resources (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The renderer used by the library can be replaced with a custom renderer for framework support.
Sadly there is only one example listed within the docs but it will be easy it would be to include it within React or Riot due to the Virtual DOM.&lt;/p&gt;
&lt;p&gt;To work with this library you need to have an element on the page to target:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;myTree&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can init tree functionality and fetch the data at the same time like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; tree = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InspireTree({
    target: &lt;span class=&quot;string&quot;&gt;'.tree'&lt;/span&gt;,
    data: $.getJSON(&lt;span class=&quot;string&quot;&gt;'http://example.com/some-data.json'&lt;/span&gt;)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When custom behavior is needed you can attach this to be fired when curtain events are emitted. There is a list of events present on the Github page for reference. This is an example of how a click handler would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;tree.on(&lt;span class=&quot;string&quot;&gt;'node.click'&lt;/span&gt;, (evt, node) =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;// node clicked!&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log([&lt;span class=&quot;string&quot;&gt;'node clicked'&lt;/span&gt;, evt, node]);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rest of the API is very well documented so I would suggest you browse through it if you need more convincing that this is one of the most extensive UI tree library out there.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Weekly Challenges</title>
      <link>http://daily-javascript.com/articles/weekly-challenge-2015-51/</link>
      <pubDate>Fri, 18 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/weekly-challenge-2015-51/</guid>
      <author></author>
      <description>&lt;p&gt;Since I started missing a lot of Friday posts, I came up with a new section for which I can prepare during the week.&lt;/p&gt;
&lt;p&gt;I’m introducing Weekly Challenges. Every Friday I will post an assignment related to programming. These challenges can be math problems, mathematical phenomenons or building something using a previously mentioned library.&lt;/p&gt;
&lt;p&gt;These assignments are to challenges yourself. This is not a competition. I will do my best to design/pick challenges that will be interesting for developers of all skill levels.
But do not feel limited to the challenge description, if you can create something more complex than the challenge describes, do it!&lt;/p&gt;
&lt;p&gt;If you have great idea’s for futures challenges please submit it via &lt;a href=&quot;http://goo.gl/forms/8FaZJSBxjO&quot;&gt;this Google Form&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An overview of the challenges can be found at &lt;a href=&quot;http://daily-javascript.com/challenges&quot;&gt;/challenges&lt;/a&gt;. This weeks challenge is the &lt;a href=&quot;http://daily-javascript.com/challenges/pythagoras-tree/&quot;&gt;Pythagoras Tree&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>isomorphine</title>
      <link>http://daily-javascript.com/articles/isomorphine/</link>
      <pubDate>Thu, 17 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/isomorphine/</guid>
      <author></author>
      <description>&lt;p&gt;isomorphine (GitHub: &lt;a href=&quot;https://github.com/d-oliveros/isomorphine&quot;&gt;d-oliveros/isomorphine&lt;/a&gt;, License: MIT, npm: isomorphine)&lt;/p&gt;
&lt;p&gt;Earlier this week I came across &lt;a href=&quot;https://medium.com/@MarcFly1103/a-painkiller-for-isomorphic-data-fetching-c829ecc84274#.hqabvytiu&quot;&gt;a post&lt;/a&gt; by &lt;a href=&quot;https://medium.com/@MarcFly1103&quot;&gt;Marco Romero&lt;/a&gt;. It was a highlight of isomorphine, which is a Webpack loader that lets you require and use server-side entities from the browser, as if you were in the server.
The browser accesses a proxy of the server’s methods that are being required. The proxy is a mirror of the server-side entity and creates an HTTP request to Isomorphine’s endpoint within the server.&lt;/p&gt;
&lt;p&gt;Marco describes it as “A Painkiller for Isomorphic Data Fetching”. With which I totally agree. When developing Isomorphic/Universal apps data retrieval can be a real hassle and this little marble will take way a lot of that pain.&lt;/p&gt;
&lt;p&gt;Of course there are established libraries and techniques for solving this issue such as: &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt; and &lt;a href=&quot;https://github.com/RickWong/react-transmit&quot;&gt;React-Transmit&lt;/a&gt;. The downside of these approaches is that you are doing a commitment to a framework which could collide with your business philosophy or you just do not like React. Don’t get me wrong I love React, but I can understand if some developer do not or need something more agnostic and now you can.&lt;/p&gt;
&lt;p&gt;I could go into the details of how you would use it but I doubt that it will be more complete than the great post Marco did. So I won’t and instead refer you to the &lt;a href=&quot;https://medium.com/@MarcFly1103/a-painkiller-for-isomorphic-data-fetching-c829ecc84274#.hqabvytiu&quot;&gt;post on medium&lt;/a&gt; and for more extensive documentation check the &lt;a href=&quot;https://github.com/d-oliveros/isomorphine&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Runjs</title>
      <link>http://daily-javascript.com/articles/runjs/</link>
      <pubDate>Tue, 15 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/runjs/</guid>
      <author></author>
      <description>&lt;p&gt;Runjs (GitHub: &lt;a href=&quot;https://github.com/pawelgalazka/runjs&quot;&gt;pawelgalazka/runjs&lt;/a&gt;, License: MIT, npm: runjs)&lt;/p&gt;
&lt;p&gt;Back in the days we used to do everything with Makefile’s now we have Gulpfile’s, Gruntfile’s and probably too much to put in a list.
Now there is a new friend in the build family, Runjs, which is a minimalistic framework for executing build tasks.&lt;/p&gt;
&lt;p&gt;It’s API consists of just a few functions run, watch, generate and call. With these functions you would create a runfile.js.
A simple runfile would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {run} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'runjs'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showFiles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    run(&lt;span class=&quot;string&quot;&gt;'ls'&lt;/span&gt;);
}

&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mkdir&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;{
    run(&lt;span class=&quot;string&quot;&gt;`mkdir &lt;span class=&quot;subst&quot;&gt;${name}&lt;/span&gt;`&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These tasks can be executed via the Runjs cli like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;run showFiles
run mkdir someDirName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can do everything from watching files to generating new files based on configured templates etc.
What I like about this little framework is that it does not require plugins but just Node packages for extra functionality. This in contrast to Gulp where most plugins are wrapped as a gulp-plugin and using libraries that do not have this is as hassle.&lt;/p&gt;
&lt;p&gt;To help you get started this is what full runfile would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {run, generate, watch} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'runjs'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; crypto &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'crypto'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {sleep} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'sleep'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; express &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; task = {};

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeHash&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; time = &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now();
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; crypto.createHash(&lt;span class=&quot;string&quot;&gt;'sha1'&lt;/span&gt;).update(time.toString()).digest(&lt;span class=&quot;string&quot;&gt;'hex'&lt;/span&gt;);
}

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exist&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;path&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; {
        fs.accessSync(path, fs.F_OK);
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
    } &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(e){
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    }
}

task.echo = () =&amp;gt; {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'echo'&lt;/span&gt;);
};

task.install = () =&amp;gt; {
    run(&lt;span class=&quot;string&quot;&gt;'npm install'&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;'jspm install'&lt;/span&gt;);
    task[&lt;span class=&quot;string&quot;&gt;'build:dev:configure'&lt;/span&gt;](&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
};

task.uninstall = () =&amp;gt; {
    task[&lt;span class=&quot;string&quot;&gt;'clean:dist'&lt;/span&gt;]();
    task[&lt;span class=&quot;string&quot;&gt;'clean:cache'&lt;/span&gt;]();
    run(&lt;span class=&quot;string&quot;&gt;'rm -rf node_modules'&lt;/span&gt;);
};

task.test = () =&amp;gt; {
    run(&lt;span class=&quot;string&quot;&gt;'mocha'&lt;/span&gt;);
};

task[&lt;span class=&quot;string&quot;&gt;'clean:dist'&lt;/span&gt;] = () =&amp;gt; {
    run(&lt;span class=&quot;string&quot;&gt;'rm -rf dist/*'&lt;/span&gt;);
};

task.cmd = (...args) =&amp;gt; {
    run(args.join(&lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt;));
};

task[&lt;span class=&quot;string&quot;&gt;'build:dev:configure'&lt;/span&gt;] = (force) =&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!exist(&lt;span class=&quot;string&quot;&gt;'dist/react.bundle.js'&lt;/span&gt;) || force){
        run(&lt;span class=&quot;string&quot;&gt;'jspm bundle react + react-dom dist/react.bundle.js --inject'&lt;/span&gt;);
    }
};

task.watch = () =&amp;gt; {
    watch(&lt;span class=&quot;string&quot;&gt;'src/app.less'&lt;/span&gt;, () =&amp;gt; {
        run(&lt;span class=&quot;string&quot;&gt;'lessc src/app.less dist/app.css --source-map'&lt;/span&gt;);
    });

    watch(&lt;span class=&quot;string&quot;&gt;'src/*.jsx'&lt;/span&gt;, (path) =&amp;gt; {
        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; outPath = path.split(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;);
        outPath.shift();
        outPath.unshift(&lt;span class=&quot;string&quot;&gt;'dist'&lt;/span&gt;);
        outPath = outPath.join(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;);
        outPath = outPath.split(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;);
        outPath.pop();
        outPath.push(&lt;span class=&quot;string&quot;&gt;'js'&lt;/span&gt;);
        outPath = outPath.join(&lt;span class=&quot;string&quot;&gt;'.'&lt;/span&gt;);
        run(&lt;span class=&quot;string&quot;&gt;`babel &lt;span class=&quot;subst&quot;&gt;${path}&lt;/span&gt; --out-file &lt;span class=&quot;subst&quot;&gt;${outPath}&lt;/span&gt; --source-maps inline`&lt;/span&gt;);
    });
};

task[&lt;span class=&quot;string&quot;&gt;'build:template'&lt;/span&gt;] = (src, dst, context) =&amp;gt; {
    generate(src, dst, context);
};

task[&lt;span class=&quot;string&quot;&gt;'build:dev'&lt;/span&gt;] = () =&amp;gt; {
    run(&lt;span class=&quot;string&quot;&gt;'lessc src/app.less dist/app.css --source-map-map-inline'&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;'babel src --out-dir dist --source-maps inline'&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;'rm dist/config.js'&lt;/span&gt;);
    task[&lt;span class=&quot;string&quot;&gt;'build:template'&lt;/span&gt;](&lt;span class=&quot;string&quot;&gt;'src/index.tpl.html'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'dist/index.html'&lt;/span&gt;, {compiled: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;});
    task[&lt;span class=&quot;string&quot;&gt;'build:dev:configure'&lt;/span&gt;]();
};

task[&lt;span class=&quot;string&quot;&gt;'build:dist'&lt;/span&gt;] = () =&amp;gt; {
    task[&lt;span class=&quot;string&quot;&gt;'clean:dist'&lt;/span&gt;]();
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fingerprint = timeHash();
    task[&lt;span class=&quot;string&quot;&gt;'build:template'&lt;/span&gt;](&lt;span class=&quot;string&quot;&gt;'src/index.tpl.html'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'dist/index.html'&lt;/span&gt;, {compiled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, fingerprint: fingerprint});
    run(&lt;span class=&quot;string&quot;&gt;`jspm bundle-sfx app dist/app.&lt;span class=&quot;subst&quot;&gt;${fingerprint}&lt;/span&gt;.js --minify`&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;`cleancss src/app.css -o dist/app.&lt;span class=&quot;subst&quot;&gt;${fingerprint}&lt;/span&gt;.css`&lt;/span&gt;);
};

task[&lt;span class=&quot;string&quot;&gt;'serve:express'&lt;/span&gt;] = (prod) =&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;9090&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; app = express();
    app.use(express.static(&lt;span class=&quot;string&quot;&gt;'dist'&lt;/span&gt;, {etag: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}));
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!prod){
        app.use(express.static(&lt;span class=&quot;string&quot;&gt;'src'&lt;/span&gt;, {etag: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;}));
    }
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; server = app.listen(port);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Express static server listening at http://localhost:%s'&lt;/span&gt;, port);
};

task[&lt;span class=&quot;string&quot;&gt;'serve:dev'&lt;/span&gt;] = () =&amp;gt; {
    task[&lt;span class=&quot;string&quot;&gt;'build:dev'&lt;/span&gt;]();
    task[&lt;span class=&quot;string&quot;&gt;'serve:express'&lt;/span&gt;]();
    run(&lt;span class=&quot;string&quot;&gt;'live-reload --port 9091 dist'&lt;/span&gt;, {&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;});
    sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;'open -a &quot;Google Chrome&quot; http://localhost:9090'&lt;/span&gt;);
    task.watch();
};

task[&lt;span class=&quot;string&quot;&gt;'serve:dist'&lt;/span&gt;] = () =&amp;gt; {
    task[&lt;span class=&quot;string&quot;&gt;'build:dist'&lt;/span&gt;]();
    task[&lt;span class=&quot;string&quot;&gt;'serve:express'&lt;/span&gt;](&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);
    sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
    run(&lt;span class=&quot;string&quot;&gt;'open -a &quot;Google Chrome&quot; http://localhost:9090'&lt;/span&gt;);
};


&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; task;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Shem</title>
      <link>http://daily-javascript.com/articles/shem/</link>
      <pubDate>Mon, 14 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/shem/</guid>
      <author></author>
      <description>&lt;p&gt;Shem (GitHub: &lt;a href=&quot;https://github.com/xixixao/Shem&quot;&gt;xixixao/Shem&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/5bc68d66ae5953c7097414ac8a978271b11d7e2a/687474703a2f2f7368656d2e696f2f696d672f73637265656e2d73686f742d62696e6172797365617263682e706e67&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Shem is a new “compiled-to-JS”, functional programming language which is statically typed.
The semantics are based on &lt;a href=&quot;http://daily-javascript.com/articles/shem/&quot;&gt;Haskell&lt;/a&gt; but the language evaluates strictly in a similar way to &lt;a href=&quot;http://daily-javascript.com/articles/shem/&quot;&gt;PureScript&lt;/a&gt;. The syntax is S-expressions-based.
This for allowing for a &lt;a href=&quot;http://daily-javascript.com/articles/shem/&quot;&gt;LISP&lt;/a&gt;-like macro system. Shem’s prelude includes a full-featured, highly-polymorphic collections library backed by &lt;a href=&quot;http://daily-javascript.com/articles/shem/&quot;&gt;ImmutableJS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It comes with an amazing IDE called “&lt;a href=&quot;https://github.com/xixixao/Golem&quot;&gt;Golem&lt;/a&gt;“. This IDE was designed with the language to make the integration seamlessly.
The IDE is available at &lt;a href=&quot;http://shem.io/&quot;&gt;shem.io&lt;/a&gt; to work with in the browser. There are plan’s to make it also accessible as a local IDE for developing applications native platform such as desktop.&lt;/p&gt;
&lt;p&gt;There is a video available of what I believe is one of the first presentations check it out to see Shem and Golem in action&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/HnZipJOan54&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;When this language interests you, you can go over to IDE and follow a small tutorial to give you a quick overview of how the language works.
If you are familiar with languages such as LISP and Haskell you will feel right at home.&lt;/p&gt;
&lt;p&gt;The owner of the project &lt;a href=&quot;https://github.com/xixixao&quot;&gt;Michal Srb&lt;/a&gt; also want you to know the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am providing code in this repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not from my employer (Facebook).&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    <item>
      <title>Split.js</title>
      <link>http://daily-javascript.com/articles/splitjs/</link>
      <pubDate>Thu, 10 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/splitjs/</guid>
      <author></author>
      <description>&lt;p&gt;Split.js (GitHub: &lt;a href=&quot;https://github.com/nathancahill/Split.js&quot;&gt;nathancahill/Split.js&lt;/a&gt;, License: MIT, npm: split.js)&lt;/p&gt;
&lt;p&gt;Split.js is a lightweight, unopinionated utility for creating adjustable split views or panes. What I like about this library is the minimal requirements to get it to work.
It has no depenencies such as jQuery and does not require you to jump through three burning hoopes before you have it working,
just two elements that have a parent in common and you are set.
I comes with draggable gutters to resize the panes and the API is very easy, just one function, &lt;code&gt;Split&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let’s look at some code. Let’s say we have a markup that looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;one&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;two&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- .... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then a basic split would work like this in Javascript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Split([&lt;span class=&quot;string&quot;&gt;'#one'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#two'&lt;/span&gt;], {
    sizes: [&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;],
    minSize: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It’s possible to add as many elements as you want, as long as they share the same parent. Let’s take three as example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Split([&lt;span class=&quot;string&quot;&gt;'#one'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#two'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'#three'&lt;/span&gt;], {
    minSize: [&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;]
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this library is unopinionated, it does not come with much styling. You can implement your own styles like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.gutter&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;hexcolor&quot;&gt;#eee&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-repeat&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; no-repeat&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.gutter&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.gutter-horizontal&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'grips/vertical.png'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;cursor&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; ew-resize&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;

&lt;span class=&quot;class&quot;&gt;.gutter&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.gutter-vertical&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; &lt;span class=&quot;function&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'grips/horizontal.png'&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;cursor&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; ns-resize&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that split works the best with &lt;code&gt;border-box&lt;/code&gt;ed element’s, so if you did not apply this within your reset, you could set it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-css&quot;&gt;&lt;span class=&quot;class&quot;&gt;.split&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-webkit-box-sizing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; border-box&lt;/span&gt;&lt;/span&gt;;
     &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;-moz-box-sizing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; border-box&lt;/span&gt;&lt;/span&gt;;
          &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;box-sizing&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; border-box&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The library comes with a lot of extra options which will infusence how the panes and the gutters should act. Check the &lt;a href=&quot;https://github.com/nathancahill/Split.js&quot;&gt;README&lt;/a&gt; for that.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>bigfloat</title>
      <link>http://daily-javascript.com/articles/bigfloat/</link>
      <pubDate>Wed, 09 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/bigfloat/</guid>
      <author></author>
      <description>&lt;p&gt;bigfloat (GitHub: &lt;a href=&quot;https://github.com/charto/bigfloat&quot;&gt;charto/bigfloat&lt;/a&gt;, License: MIT, npm: bigfloat)&lt;/p&gt;
&lt;p&gt;bigfloat is an arbitrary precision math library optimized for computation on geometry and geoinformatics. It provides a base 2 floating point.
It can covert Javascript float’s, add, subtract, multiply and convert it back to a Javascript String. It can do all this whiteout losing any significant bits. Numbers are  treaded as immutable and will return a new BigFloat.&lt;/p&gt;
&lt;p&gt;So how does it do this?
Numbers are represented in 32-bit limbs (digits in base 2^32).
The least significant limb is stored first. This because basic algorithms for arithmetic operations progress from the least to most significant digit while propagating carry. If carry causes the output to grow, adding a new limb at the end of the Array is faster than adding it in the beginning.
The library was optimized for exponents relatively close to zero, so the location of the decimal point is always present in the limb array, even if that introduces otherwise insignificant leading or trailing zero digits.&lt;/p&gt;
&lt;p&gt;Let’s look at a quick example if I would run this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; x = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;),
    result = x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - x;

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( result );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give me back &lt;code&gt;0&lt;/code&gt;. But we would expect to get &lt;code&gt;1&lt;/code&gt;. If we would do the same using bigfloat:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; BigFloat = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'bigfloat'&lt;/span&gt;).BigFloat,
       x = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;53&lt;/span&gt;),
      result = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigFloat(x).add(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).sub(x).toString();

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would log &lt;code&gt;1&lt;/code&gt;, as we would suspect.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>embed.js</title>
      <link>http://daily-javascript.com/articles/embedjs/</link>
      <pubDate>Tue, 08 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/embedjs/</guid>
      <author></author>
      <description>&lt;p&gt;embed.js (GitHub: &lt;a href=&quot;https://github.com/ritz078/embed.js/&quot;&gt;ritz078/embed.js&lt;/a&gt;, License: MIT, npm: embed-js)&lt;/p&gt;
&lt;p&gt;embed.js is plugin which analyses a string and automatically transform is to embeds emojis, media, maps, tweets, code and services.
No more hassle on finding out how different services work, no more putting off features, because the intergration would be complicated. Just transform it using embed.js.&lt;/p&gt;
&lt;p&gt;So how do we use it? Imagine having a blog and the content of a post would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is the blog we al know and :heart:. Url will become clickable like this http://daily-javascript.com.
youtube videos. https://www.youtube.com/watch?v=bQRLVxZHKPs
and embed codepen&amp;#39;s like so: http://codepen.io/ThePizzaMan/pen/YwPOVd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This would get transformed into a pretty post with all the services embedded. The only thing needed is a Google Auth key which you can get &lt;a href=&quot;https://console.developers.google.com/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then if we want to transform a specific element we would do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;embed&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EmbedJS({
        element: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;'rawText'&lt;/span&gt;),
        googleAuthKey: &lt;span class=&quot;string&quot;&gt;'&amp;lt;googleAuthKey&amp;gt;'&lt;/span&gt;,
        videoWidth: &lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;,
        tweetOptions: {
            hideMedia: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
        },
        codeEmbedHeight:&lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;
    });
    x.render();
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It supports emoji’s, Twitter, Gists, Codepen’s, photo’s, Spotify, Google Maps, Markdown and many more.
For more options and list of supported services check the &lt;a href=&quot;http://riteshkr.com/embed.js/&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a small CodePen demo of what it can do with the example code for you to try out.&lt;/p&gt;
&lt;iframe height='268' scrolling='no' src='//codepen.io/ThePizzaMan/embed/YwPOVd/?height=268&amp;theme-id=0&amp;default-tab=result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;See the Pen &lt;a href='http://codepen.io/ThePizzaMan/pen/YwPOVd'&gt;embed.js&lt;/a&gt; by Ritesh Kumar (&lt;a href='http://codepen.io/ritz078'&gt;@ritz078&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
</description>
    </item>
    <item>
      <title>iFrame Resizer</title>
      <link>http://daily-javascript.com/articles/iframe-resizer/</link>
      <pubDate>Mon, 07 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/iframe-resizer/</guid>
      <author></author>
      <description>&lt;p&gt;iFrame Resizer (GitHub: &lt;a href=&quot;https://github.com/davidjbradshaw/iFrame-resizer&quot;&gt;davidjbradshaw/iFrame-resizer&lt;/a&gt;, License: MIT, npm: iframe-resizer)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/davidjbradshaw&quot;&gt;David Bradshaw&lt;/a&gt; sent in iFrame-resizer. Which is a library to make working with the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag a lot easier.
It hides a lot of the stuff you need to change sizes, authorize domains or messaging. I suspect that this project started out as a simple library to help with resizing of an iframe which grew to a full fletched iframe utility belt.&lt;/p&gt;
&lt;p&gt;So let’s take a look how it works. The package consists of two files. The first one needs to be included on the &lt;em&gt;parent&lt;/em&gt; page and the second one need to be within all the &lt;em&gt;child&lt;/em&gt; frames. The child-script does not do anything unless when called by the parent. So a typical setup would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Parent page&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;This is the parent page&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://example.com/child-page&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;my-frame&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;scrolling&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;scr&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/path/to/iframeResizer.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/path/to/your/script.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Child page&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;This is the child page&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;scr&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/path/to/iframeResizer.contentWindow.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then to active auto-resize for instance, we can work with it from our script like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; options = {
    log: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    autoResize: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
}
iFrameResize( options, &lt;span class=&quot;string&quot;&gt;'#my-frame'&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As said before this is only the basic usage for more extensive usage you should check the &lt;a href=&quot;http://davidjbradshaw.github.io/iframe-resizer&quot;&gt;project page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Matreshka</title>
      <link>http://daily-javascript.com/articles/matreshka/</link>
      <pubDate>Thu, 03 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/matreshka/</guid>
      <author></author>
      <description>&lt;p&gt;Matreshka (GitHub: &lt;a href=&quot;https://github.com/matreshkajs/matreshka&quot;&gt;matreshkajs/matreshka&lt;/a&gt;, License: MIT, npm: matreshka, bower: matreshka)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/27ecdbde13a34ee2555f36ba3e3ee9363413d6f0/687474703a2f2f6d6174726573686b612e696f2f696d672f6d6b352d6c6f676f5f66756c6c2d766572742e737667&quot; alt=&quot;http://matreshka.io/&quot;&gt;&lt;/p&gt;
&lt;p&gt;Matreshka is small but powerful client-side framework that allows you to build single page applications.
It describes it self as a event driven framework, which means that you put listeners on objects and elements to which you can react with configured handler functions.
Besides it’s event system it comes with features such as: two-way data-binding, custom objects and custom arrays.&lt;/p&gt;
&lt;p&gt;Let’s say we would be making a simple SPA then this would be our markup would look something like this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;My first Matreshka application&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;my-input&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;my-output&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://cdn.jsdelivr.net/matreshka/latest/matreshka.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see we import the Matreshka via a script tag but it’s also possible to install via npm.
Nothing new here right? So let’s put some code in our &lt;code&gt;script&lt;/code&gt; tag. Let’s make an “class” called Application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Application = Class({
    &lt;span class=&quot;string&quot;&gt;'extends'&lt;/span&gt;: Matreshka,
    constructor: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{

        &lt;span class=&quot;comment&quot;&gt;// bind the property x and the text field&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bindNode(&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'.my-input'&lt;/span&gt;);

        &lt;span class=&quot;comment&quot;&gt;// bind the property x and the &quot;.my-output&quot; block&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bindNode(&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'.my-output'&lt;/span&gt;, {
            setValue: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;v&lt;/span&gt;) &lt;/span&gt;{
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.innerHTML = v;
            }
        });
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.on(&lt;span class=&quot;string&quot;&gt;'change:x'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'x changed to '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x);
        });
    }
});

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Application();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or the same code in ES2015:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Matreshka&lt;/span&gt; &lt;/span&gt;{
    constructor() {
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bindNode(&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'.my-input'&lt;/span&gt;);
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.bindNode(&lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'.my-output'&lt;/span&gt;, {
            setValue(v) {
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.innerHTML = v;
            }
        });
        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.on(&lt;span class=&quot;string&quot;&gt;'change:x'&lt;/span&gt;, () =&amp;gt;
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'x changed to '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when something happens we can change the value &lt;code&gt;x&lt;/code&gt; like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;app.x = &lt;span class=&quot;string&quot;&gt;'Hello Daily Javascript'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will fill the &lt;code&gt;input&lt;/code&gt; and the &lt;code&gt;#output&lt;/code&gt; elements with the string &lt;code&gt;&amp;#39;Hello Daily Javascript&amp;#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nowadays we are not impressed by data-binding any more. It comes with a lot more, but for that I would refer you to the &lt;a href=&quot;http://matreshka.io/&quot;&gt;full documentation&lt;/a&gt;. The API is very small and easy to reason about, so if you have a new POC project coming up I would suggest you give it a try.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ally.js</title>
      <link>http://daily-javascript.com/articles/allyjs/</link>
      <pubDate>Wed, 02 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/allyjs/</guid>
      <author></author>
      <description>&lt;p&gt;ally.js (GitHub: &lt;a href=&quot;https://github.com/medialize/ally.js&quot;&gt;medialize/ally.js&lt;/a&gt;, License: MIT, npm: ally.js)&lt;/p&gt;
&lt;p&gt;Ever had the problem of having to accommodate for instance blind people on your website?
With the web app’s of nowadays accessibility sometimes goes to waste by not having the need for “semantic” HTML and just putting everything inside &lt;code&gt;div&lt;/code&gt;‘s.
Don’t get me wrong, I ofter find myself using a &lt;code&gt;div&lt;/code&gt; to make buttons for instance. But for the blind users of the web this can be a serious problem, because their assistance software and the browser do not have the correct content they use all accessibility to your website.&lt;/p&gt;
&lt;p&gt;ally.js is a library simplifying certain accessibility features, functions and behaviors.
Its goal is to help web applications with accessibility concerns provide every user with a good experience.&lt;/p&gt;
&lt;p&gt;It has an amazingly extensive API to solve most accessibility problems, way to much to even begin to describe so I will direct you to their &lt;a href=&quot;http://allyjs.io/index.html&quot;&gt;website&lt;/a&gt; where everything is explained into more detail than I could do in a day.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>dotconf</title>
      <link>http://daily-javascript.com/articles/dotconf/</link>
      <pubDate>Tue, 01 Dec 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/dotconf/</guid>
      <author></author>
      <description>&lt;p&gt;dotconf (GitHub: &lt;a href=&quot;https://github.com/yoannmoinet/dotconf&quot;&gt;yoannmoinet/dotconf&lt;/a&gt;, License: MIT, npm: dotconf)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yoannmoinet/dotconf/raw/master/media/demo.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Are you also tired of all the &lt;code&gt;.something&lt;/code&gt; config files for all the tooling we need which is cluttering up your tree? Well &lt;a href=&quot;https://github.com/yoannmoinet&quot;&gt;Yoann Moinet&lt;/a&gt; made a solution for this problem, dotconf.&lt;/p&gt;
&lt;p&gt;What is does is bundle all your existing &lt;code&gt;.something&lt;/code&gt; files and directories into one &lt;code&gt;.conf&lt;/code&gt;.
Yoann uses the term “One config to rule them all”. Since I’m a big Lord of the Rings fan, this slogan catch my attention. After trying it our in some projects I really enjoyed how it cleans up all the config files in my tree view.&lt;/p&gt;
&lt;p&gt;The CLI is very easy, use &lt;code&gt;-a&lt;/code&gt; to ‘archive’ all the &lt;code&gt;.something&lt;/code&gt; files and &lt;code&gt;-e&lt;/code&gt; to extract them again.
Besides that it comes with a bunch more options to specify that way it should behave such as: destination, pattern, safe mode and what to ignore.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Microm</title>
      <link>http://daily-javascript.com/articles/microm/</link>
      <pubDate>Mon, 30 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/microm/</guid>
      <author></author>
      <description>&lt;p&gt;Microm (GitHub: &lt;a href=&quot;https://github.com/zzarcon/microm&quot;&gt;zzarcon/microm&lt;/a&gt;, License: MIT, npm: microm, bower: microm)&lt;/p&gt;
&lt;p&gt;Microm is a wrapper of few audio converting libraries to expose a Promise and Event oriented API.
The goal of the library is to make it more trivial to play and convert audio in the browser. Besides that I would say this work in some &lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt; application.&lt;/p&gt;
&lt;p&gt;Microm uses the following libs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/zhuker/lamejs&quot;&gt;lamejs&lt;/a&gt; mp3 encoder in javascript&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webrtc/adapter&quot;&gt;webrtc-adapter&lt;/a&gt; Shim to insulate apps from spec changes and prefix differences&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/muaz-khan/RecordRTC&quot;&gt;RecordRTC&lt;/a&gt; record WebRTC audio/video media streams&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tildeio/rsvp.js/&quot;&gt;RSVP&lt;/a&gt; Provides tools for organizing asynchronous code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to get the user recorded data, it use webrtc-adapter and RecordRTC to provide some shims and tools to make it easy to work with multiple browsers.
Next they use lamejs to convert Wav to Mp3 and finally to provide a Promise based API, it uses RSVP to support the &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s look at some example code. When you want to record the browsers microphone you can use the &lt;code&gt;startRecording&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; microm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Microm();

microm.startRecording()
      .then(() =&amp;gt; { &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'recording...'&lt;/span&gt;)})
      .catch(() =&amp;gt; { &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'error recording'&lt;/span&gt;)});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because we want to do a bit more then just record, let’s play it back to the user. To do that we need to do this:
We do this like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;microm.stop()
      .then((result) =&amp;gt; { microm.play() });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to provide you user with a download of the recording can use the &lt;code&gt;download&lt;/code&gt; method like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;microm.stop()
      .then((result) =&amp;gt; { microm.download(&lt;span class=&quot;string&quot;&gt;'my-voice'&lt;/span&gt;) });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively you could save the recording to a server by posting a base64 encoding of it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;microm.getBase64().then((base64string) =&amp;gt; {
    $.ajax({
        type: &lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;,
        contentType: &lt;span class=&quot;string&quot;&gt;'application/octet-stream'&lt;/span&gt;,
        mimeType: &lt;span class=&quot;string&quot;&gt;'audio/mpeg'&lt;/span&gt;,
        processData: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
        url: &lt;span class=&quot;string&quot;&gt;'http://some.serv.er/upload-audio'&lt;/span&gt;,
        data: base64string,
        success: someSuccessCallBack
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides recording, playing and downloading you want to give the user some feedback.
We can use the events emitted by the library to present the user with feedback.&lt;/p&gt;
&lt;p&gt;By attaching the &lt;code&gt;on&lt;/code&gt; listener we can listen for this list of events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeupdate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadedmetadata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;play&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pause&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ended&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;microm.on(&lt;span class=&quot;string&quot;&gt;'timeupdate'&lt;/span&gt;, updateCurrentTime);
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateCurrentTime&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;time&lt;/span&gt;) &lt;/span&gt;{ &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(time); }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>react-pull-to-refresh</title>
      <link>http://daily-javascript.com/articles/react-pull-to-refresh/</link>
      <pubDate>Thu, 26 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/react-pull-to-refresh/</guid>
      <author></author>
      <description>&lt;p&gt;react-pull-to-refresh (GitHub: &lt;a href=&quot;https://github.com/bryaneaton13/react-pull-to-refresh&quot;&gt;bryaneaton13/react-pull-to-refresh&lt;/a&gt;, License: MIT, npm: react-pull-to-refresh)&lt;/p&gt;
&lt;p&gt;react-pull-to-refresh is a library that does exactly what the name implies. It gives the pull to refresh behavior.
&lt;img src=&quot;https://github.com/bryaneaton13/react-pull-to-refresh/raw/master/docs/demo.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;It is based on the &lt;a href=&quot;https://github.com/apeatling/web-pull-to-refresh&quot;&gt;library&lt;/a&gt; that Andy Peatling made and wrote a post about. You can find that &lt;a href=&quot;https://github.com/apeatling/web-pull-to-refresh&quot;&gt;here&lt;/a&gt;.
So let’s take a look at how it works, your refresh handler takes in &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt; to tell the component when it’s finished. That would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;handleRefresh(resolve, reject) {
    &lt;span class=&quot;comment&quot;&gt;// do some async code here&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; success = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (success) {
        resolve();
    } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
        reject();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is what the component would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ReactPullToRefresh&lt;/span&gt;
    &lt;span class=&quot;attribute&quot;&gt;onRefresh&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{this.handleRefresh}&lt;/span&gt;
    &lt;span class=&quot;attribute&quot;&gt;className&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;your-own-class-if-you-want&quot;&lt;/span&gt;
    &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;textAlign:&lt;/span&gt; '&lt;span class=&quot;attribute&quot;&gt;center&lt;/span&gt;' }}&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Pull down to refresh&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;{items}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;etc.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ReactPullToRefresh&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically that is all that there is to it. For the American readers I hope you have a nice Thanksgiving.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vue.js</title>
      <link>http://daily-javascript.com/articles/vuejs/</link>
      <pubDate>Wed, 25 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/vuejs/</guid>
      <author></author>
      <description>&lt;p&gt;Vue.js (GitHub: &lt;a href=&quot;https://github.com/vuejs/vue&quot;&gt;vuejs/vue&lt;/a&gt;, License: MIT, npm: vue&lt;/p&gt;
&lt;p&gt;Vue.js is a library for building web interfaces. Because it works together with some other tools, you can also call it a “framework”. Now, if you’ve never heard of or used Vue before, you are probably thinking: great, yet another JavaScript framework! I get it. That was my first thought as well, that is why I never looked at it with a serious eye. Vue isn’t particularly new, it has being in the making for almost two years now, and the first public release was in February 2014. Over time it has evolving into a great engine to build beautiful production ready app with.&lt;/p&gt;
&lt;p&gt;What makes it so awesome? Well, it supports all the features we are used to from libraries such as React, Ember and Angular but it’s size and api are a lot simpler.
A thing I love in libraries, simplicity.&lt;/p&gt;
&lt;p&gt;So let’s take a look at a few small examples and let’s start with data binding.&lt;/p&gt;
&lt;p&gt;This is how we define the &lt;code&gt;template&lt;/code&gt; which we are gonna use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;binding&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;{{message}}&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;v-model&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;message&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we give it some data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; binding = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue({
  el: &lt;span class=&quot;string&quot;&gt;'#binding'&lt;/span&gt;,
  data: {
    message: &lt;span class=&quot;string&quot;&gt;'Daily Javascript'&lt;/span&gt;
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would give is a &lt;code&gt;div&lt;/code&gt; with an &lt;code&gt;input&lt;/code&gt; field and a preview of the value it holds. When you start typing, Vue will take over from there.
That’s cool right? Ok I get it data binding does not impress you anymore. Do you like working with components?
Vue takes an approach that is very similar to React: it’s components all the way down.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; Example = Vue.extend({
    template: &lt;span class=&quot;string&quot;&gt;'&amp;lt;div&amp;gt;{{ message }}&amp;lt;/div&amp;gt;'&lt;/span&gt;,
    data () {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
            message: &lt;span class=&quot;string&quot;&gt;'Daily Javascript!'&lt;/span&gt;
        }
    }
});

&lt;span class=&quot;comment&quot;&gt;// register it with the tag &amp;lt;example&amp;gt;&lt;/span&gt;
Vue.component(&lt;span class=&quot;string&quot;&gt;'example'&lt;/span&gt;, Example);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;example&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because modularity is key nowadays it comes with the opportunity to &lt;code&gt;scope&lt;/code&gt; styles to a component.
That would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;scoped&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;
&lt;span class=&quot;class&quot;&gt;.message&lt;/span&gt; &lt;span class=&quot;rules&quot;&gt;{
  &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt; red&lt;/span&gt;&lt;/span&gt;;
}&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a full example component of how it would look when you would have it setup with a combination of &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;Webpack&lt;/a&gt; and &lt;a href=&quot;https://github.com/vuejs/vue-loader&quot;&gt;vue-loader&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.evanyou.me/images/vue-hot.gif&quot; alt=&quot;demo&quot;&gt;&lt;/p&gt;
&lt;p&gt;It comes with a lot of more features that I will not go into such as routing and a build-in transition system.&lt;/p&gt;
&lt;p&gt;There is a demo for the transition system which demonstrates state-based tweening with Vue:&lt;/p&gt;
&lt;p&gt;&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XmZNOG&quot; data-default-tab=&quot;result&quot; data-user=&quot;yyx990803&quot; class='codepen'&gt;See the Pen &lt;a href='http://codepen.io/yyx990803/pen/XmZNOG/'&gt;Vue.js elastic header component&lt;/a&gt; by Evan You (&lt;a href='http://codepen.io/yyx990803'&gt;@yyx990803&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
&lt;script async src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
</description>
    </item>
    <item>
      <title>Vectorious</title>
      <link>http://daily-javascript.com/articles/vectorious/</link>
      <pubDate>Tue, 24 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/vectorious/</guid>
      <author></author>
      <description>&lt;p&gt;Vectorious (GitHub: &lt;a href=&quot;https://github.com/mateogianolio/vectorious&quot;&gt;mateogianolio/vectorious&lt;/a&gt;, License: MIT, npm: vectorious)&lt;/p&gt;
&lt;p&gt;Vectorious is a high performance linear algebra library written in Javascript.
It is available via npm or just as a script so you can include it on your page.&lt;/p&gt;
&lt;p&gt;Since I’m not a mathematician and did not do a lot of linear algebra, you will have to bare with me.
I will try to give you a good description of what this library can do.&lt;/p&gt;
&lt;p&gt;It has two mayor API endpoints to work with: &lt;code&gt;Matrix&lt;/code&gt; and &lt;code&gt;Vector&lt;/code&gt;.
The constructor functions for both these functions can be called with a range of different arguments.
Since 2.1.0 Vector implements &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&quot;&gt;JavaScript typed arrays&lt;/a&gt; for increased performance. The default Vector type is Float64Array, but this can be specified upon creation.&lt;/p&gt;
&lt;p&gt;We would work with it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { Vector, Matrix } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'vectorious'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vector, matrix;

&lt;span class=&quot;comment&quot;&gt;// Create an empty vector of default type Float64Array&lt;/span&gt;
vector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector();
&lt;span class=&quot;comment&quot;&gt;/* Vector { type: [Function: Float64Array], length: 0 } */&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// Create an empty vector of type Uint8Array&lt;/span&gt;
vector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector(&lt;span class=&quot;built_in&quot;&gt;Uint8Array&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;/* Vector { type: [Function: Uint8Array], length: 0 } */&lt;/span&gt;

matrix = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Matrix();
&lt;span class=&quot;comment&quot;&gt;/* Matrix { type: [Function: Float64Array], shape: [] } */&lt;/span&gt;

vector = Vector.zeros(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;/* Vector {
  type: [Function: Float64Array],
  length: 5,
  buffer: ArrayBuffer {},
  values: Float64Array { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0 } } */&lt;/span&gt;

vector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vector(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;/* Vector {
  type: [Function: Float64Array],
  length: 5,
  buffer: ArrayBuffer {},
  values: Float64Array { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 } } */&lt;/span&gt;

matrix = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Matrix(vector);
&lt;span class=&quot;comment&quot;&gt;/* Matrix {
  type: [Function: Float64Array],
  shape: [ 5, 1 ],
  data: Float64Array { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 } } */&lt;/span&gt;

matrix = Matrix.zeros(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;/* Matrix {
  shape: [ 2, 2 ],
  data: Float64Array { '0': 0, '1': 0, '2': 0, '3': 0 },
  type: [Function: Float64Array] } */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The developer posted an example of how you would map a time range over a sinus.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; time = Vector.range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI / &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI);
&lt;span class=&quot;comment&quot;&gt;// Which will return&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/* Vector {
  type: [Function: Float64Array],
  length: 12,
  buffer: ArrayBuffer {},
  values:
   Float64Array {
     '0': 0,
     '1': 0.2617993877991494,
     '2': 0.5235987755982988,
     '3': 0.7853981633974483,
     '4': 1.0471975511965976,
     '5': 1.308996938995747,
     '6': 1.5707963267948963,
     '7': 1.8325957145940457,
     '8': 2.0943951023931953,
     '9': 2.356194490192345,
     '10': 2.6179938779914944,
     '11': 2.879793265790644 } } */&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sine = time.map(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.sin);
&lt;span class=&quot;comment&quot;&gt;// Which will return&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/* Vector {
  type: [Function: Float64Array],
  length: 12,
  buffer: ArrayBuffer {},
  values:
   Float64Array {
     '0': 0,
     '1': 0.25881904510252074,
     '2': 0.49999999999999994,
     '3': 0.7071067811865475,
     '4': 0.8660254037844386,
     '5': 0.9659258262890682,
     '6': 1,
     '7': 0.9659258262890684,
     '8': 0.8660254037844387,
     '9': 0.7071067811865476,
     '10': 0.49999999999999994,
     '11': 0.2588190451025206 } } */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides the very extensive API it also accommodates extentions such as &lt;a href=&quot;https://github.com/mateogianolio/vectorious-solve&quot;&gt;Solve&lt;/a&gt; and &lt;a href=&quot;https://github.com/mateogianolio/vectorious-plot&quot;&gt;Plot&lt;/a&gt;.
Plot for instance can be used to a two-dimensional SVG plot from two input vectors.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>PSD.js</title>
      <link>http://daily-javascript.com/articles/psdjs/</link>
      <pubDate>Mon, 23 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/psdjs/</guid>
      <author></author>
      <description>&lt;p&gt;PSD.js (GitHub: &lt;a href=&quot;https://github.com/meltingice/psd.js&quot;&gt;meltingice/psd.js&lt;/a&gt;, License: MIT, npm: psd)&lt;/p&gt;
&lt;p&gt;PSD.js is a general purpose PSD parser written in Coffeescript. I was inspired by PSD.rb which allows you to work with a Photoshop document in a manageable tree structure and find out data such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document structure&lt;/li&gt;
&lt;li&gt;Document size&lt;/li&gt;
&lt;li&gt;Layer/folder size + positioning&lt;/li&gt;
&lt;li&gt;Layer/folder names&lt;/li&gt;
&lt;li&gt;Layer/folder visibility and opacity&lt;/li&gt;
&lt;li&gt;Font data (via psd-enginedata)&lt;ul&gt;
&lt;li&gt;Text area contents&lt;/li&gt;
&lt;li&gt;Font names, sizes, and colors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Color mode and bit-depth&lt;/li&gt;
&lt;li&gt;Vector mask data&lt;/li&gt;
&lt;li&gt;Flattened image data&lt;/li&gt;
&lt;li&gt;Layer comps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although there are still some pieces missing that are present in PSD.rb, the eventual goal is to have all the features PSD.rb offers.
So let’s look at an example for converting &lt;code&gt;.psd&lt;/code&gt; as a &lt;code&gt;.png&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; PSD &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'psd'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; psd = PSD.fromFile(&lt;span class=&quot;string&quot;&gt;'my/awesome/file.psd'&lt;/span&gt;);

psd.parse();

&lt;span class=&quot;comment&quot;&gt;// Log the tree structure of the .psd&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(psd.tree().export());

&lt;span class=&quot;comment&quot;&gt;// You can use promises syntax for opening and parsing&lt;/span&gt;
PSD.open(&lt;span class=&quot;string&quot;&gt;'my/awesome/file'&lt;/span&gt;)
    .then(psd =&amp;gt; psd.image.saveAsPng(&lt;span class=&quot;string&quot;&gt;'./output.png'&lt;/span&gt;))
    .then(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Finished!'&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a very extensive API for traversing the document. If you would know the path to a group or layer within the tree, there is a way you can search by that path.
That would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;psd.tree().childrenAtPath(&lt;span class=&quot;string&quot;&gt;'Version A/Matte'&lt;/span&gt;);
psd.tree().childrenAtPath([&lt;span class=&quot;string&quot;&gt;'Version A'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Matte'&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have the layer you are interested in you can access the data like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Get the first layer&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; node = psd.tree().descendants()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];

&lt;span class=&quot;comment&quot;&gt;// Read the name&lt;/span&gt;
node.get(&lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;// Read the width&lt;/span&gt;
node.get(&lt;span class=&quot;string&quot;&gt;'width'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an example of the output &lt;code&gt;tree().export()&lt;/code&gt; would give you:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
    children: [
        {
            type: &lt;span class=&quot;string&quot;&gt;'group'&lt;/span&gt;,
            visible: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
            opacity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
            blendingMode: &lt;span class=&quot;string&quot;&gt;'normal'&lt;/span&gt;,
            name: &lt;span class=&quot;string&quot;&gt;'VersionD'&lt;/span&gt;,
            left: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
            right: &lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;,
            top: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
            bottom: &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,
            height: &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,
            width: &lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;,
            children: [
                {
                    type: &lt;span class=&quot;string&quot;&gt;'layer'&lt;/span&gt;,
                    visible: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
                    opacity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
                    blendingMode: &lt;span class=&quot;string&quot;&gt;'normal'&lt;/span&gt;,
                    name: &lt;span class=&quot;string&quot;&gt;'Makeachangeandsave.'&lt;/span&gt;,
                    left: &lt;span class=&quot;number&quot;&gt;275&lt;/span&gt;,
                    right: &lt;span class=&quot;number&quot;&gt;636&lt;/span&gt;,
                    top: &lt;span class=&quot;number&quot;&gt;435&lt;/span&gt;,
                    bottom: &lt;span class=&quot;number&quot;&gt;466&lt;/span&gt;,
                    height: &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;,
                    width: &lt;span class=&quot;number&quot;&gt;361&lt;/span&gt;,
                    mask: {

                    },
                    text: {
                        value: &lt;span class=&quot;string&quot;&gt;'Makeachangeandsave.'&lt;/span&gt;,
                        font: {
                            name: &lt;span class=&quot;string&quot;&gt;'HelveticaNeue-Light'&lt;/span&gt;,
                            sizes: [
                                &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;
                            ],
                            colors: [
                                [
                                    &lt;span class=&quot;number&quot;&gt;85&lt;/span&gt;,
                                    &lt;span class=&quot;number&quot;&gt;96&lt;/span&gt;,
                                    &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;,
                                    &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;
                                ]
                            ],
                            alignment: [
                                &lt;span class=&quot;string&quot;&gt;'center'&lt;/span&gt;
                            ]
                        },
                        left: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                        top: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                        right: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                        bottom: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                        transform: {
                            xx: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
                            xy: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                            yx: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
                            yy: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,
                            tx: &lt;span class=&quot;number&quot;&gt;456&lt;/span&gt;,
                            ty: &lt;span class=&quot;number&quot;&gt;459&lt;/span&gt;
                        }
                    },
                    image: {

                    }
                }
            ]
        }
    ],
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;: {
        width: &lt;span class=&quot;number&quot;&gt;900&lt;/span&gt;,
        height: &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,
        resources: {
            layerComps: [
                {
                    id: &lt;span class=&quot;number&quot;&gt;692243163&lt;/span&gt;,
                    name: &lt;span class=&quot;string&quot;&gt;'VersionA'&lt;/span&gt;,
                    capturedInfo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
                },
                {
                    id: &lt;span class=&quot;number&quot;&gt;725235304&lt;/span&gt;,
                    name: &lt;span class=&quot;string&quot;&gt;'VersionB'&lt;/span&gt;,
                    capturedInfo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
                },
                {
                    id: &lt;span class=&quot;number&quot;&gt;730932877&lt;/span&gt;,
                    name: &lt;span class=&quot;string&quot;&gt;'VersionC'&lt;/span&gt;,
                    capturedInfo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
                }
            ],
            guides: [

            ],
            slices: [

            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Node v5.1.0 Stable</title>
      <link>http://daily-javascript.com/articles/node-5-1-0/</link>
      <pubDate>Thu, 19 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/node-5-1-0/</guid>
      <author></author>
      <description>&lt;p&gt;First of all my excuse for not posting the past 2 days. I had a few days off from my day job because I went to a concert of Bullet For My Valentine(for those of you that might me interested). This also caused me to mis this new release of Node.js so here is a small roundup of the notable changes.&lt;/p&gt;
&lt;h3 id=&quot;-buffer-3767-https-github-com-nodejs-node-pull-3767-&quot;&gt;&lt;code&gt;buffer&lt;/code&gt; (&lt;a href=&quot;https://github.com/nodejs/node/pull/3767&quot;&gt;#3767&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;noAssert&lt;/code&gt; option for many buffer functions will now silently drop invalid write values rather than crashing This makes the behavior match what the docs suggest.&lt;/p&gt;
&lt;h3 id=&quot;-child_process-3577-https-github-com-nodejs-node-pull-3577-&quot;&gt;&lt;code&gt;child_process&lt;/code&gt; (&lt;a href=&quot;https://github.com/nodejs/node/pull/3577&quot;&gt;#3577&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;child.send() now properly returns a boolean like the docs suggest.&lt;/p&gt;
&lt;h3 id=&quot;-http_parser-3569-https-github-com-nodejs-node-pull-3569-&quot;&gt;&lt;code&gt;http_parser&lt;/code&gt; (&lt;a href=&quot;https://github.com/nodejs/node/pull/3569&quot;&gt;#3569&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;update http-parser to 2.6.0 from 2.5.0 (James M Snell) .
Now supports the following HTTP methods: &lt;code&gt;LINK&lt;/code&gt;, &lt;code&gt;UNLINK&lt;/code&gt;, &lt;code&gt;BIND&lt;/code&gt;, &lt;code&gt;REBIND&lt;/code&gt;, &lt;code&gt;UNBIND&lt;/code&gt;.
Also added ACL and IPv6 Zone ID support.&lt;/p&gt;
&lt;h3 id=&quot;-npm-3685-https-github-com-nodejs-node-pull-3685-&quot;&gt;&lt;code&gt;npm&lt;/code&gt; (&lt;a href=&quot;https://github.com/nodejs/node/pull/3685&quot;&gt;#3685&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;upgrade npm to 3.3.12 from v3.3.6.
See the release notes for &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.7&quot;&gt;v3.3.7&lt;/a&gt;, &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.8&quot;&gt;v3.3.8&lt;/a&gt;, &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.9&quot;&gt;v3.3.9&lt;/a&gt;, &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.10&quot;&gt;v3.3.10&lt;/a&gt;, &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.11&quot;&gt;v3.3.11&lt;/a&gt;, and &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v3.3.12&quot;&gt;v3.3.12&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h3 id=&quot;repl-3630-https-github-com-nodejs-node-pull-3630-&quot;&gt;REPL (&lt;a href=&quot;https://github.com/nodejs/node/pull/3630&quot;&gt;#3630&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;The REPL no longer crashes if the persistent history file cannot be opened.&lt;/p&gt;
&lt;h3 id=&quot;tls-3755-https-github-com-nodejs-node-pull-3755-&quot;&gt;tls (&lt;a href=&quot;https://github.com/nodejs/node/pull/3755&quot;&gt;#3755&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;The default sessionIdContext now uses SHA1 in FIPS mode rather than MD5.&lt;/p&gt;
&lt;h3 id=&quot;v8-3779-https-github-com-nodejs-node-pull-3779-&quot;&gt;v8(&lt;a href=&quot;https://github.com/nodejs/node/pull/3779&quot;&gt;#3779&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;Added some more useful post-mortem data.&lt;/p&gt;
&lt;h3 id=&quot;documentation-3662-https-github-com-nodejs-node-pull-3662-&quot;&gt;Documentation (&lt;a href=&quot;https://github.com/nodejs/node/pull/3662&quot;&gt;#3662&lt;/a&gt;)&lt;/h3&gt;
&lt;p&gt;All of the API docs have been re-ordered so as to read in alphabetical order.&lt;/p&gt;
&lt;p&gt;The known issues that are still in there are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Surrogate pair in REPL can freeze terminal. &lt;a href=&quot;https://github.com/nodejs/node/issues/690&quot;&gt;#690&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Calling dns.setServers() while a DNS query is in progress can cause the process to crash on a failed assertion. &lt;a href=&quot;https://github.com/nodejs/node/issues/894&quot;&gt;#894&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;url.resolve may transfer the auth portion of the url when resolving between two full hosts, see &lt;a href=&quot;https://github.com/nodejs/node/issues/1435&quot;&gt;#1435&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Unicode characters in filesystem paths are not handled consistently across platforms or Node.js APIs. See &lt;a href=&quot;https://github.com/nodejs/node/issues/2088&quot;&gt;#2088&lt;/a&gt;, &lt;a href=&quot;https://github.com/nodejs/node/issues/3401&quot;&gt;#3401&lt;/a&gt; and &lt;a href=&quot;https://github.com/nodejs/node/issues/3519&quot;&gt;#3519&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Domcom</title>
      <link>http://daily-javascript.com/articles/domcom/</link>
      <pubDate>Mon, 16 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/domcom/</guid>
      <author></author>
      <description>&lt;p&gt;Domcom (GitHub: &lt;a href=&quot;https://github.com/taijiweb/domcom&quot;&gt;taijiweb/domcom&lt;/a&gt;, License: MIT, npm: domcom)&lt;/p&gt;
&lt;p&gt;Yesterday I got an email with the request to take a look at the Domcom.
Domcom is a frontend framework which uses declarative components to proxy the DOM in order to implement better performance than &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;VirtualDOM&lt;/a&gt;. It comes with “lazy” reactive functions to manage data. A few of the features included in this framework are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Declarative compostable components with reactive function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only render the invalidated components and refresh the really changed DOM nodes with automatic update status checking&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Decouple with model and controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simple but powerful route&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Support for promise&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And a whole lot more but I would refer you to the &lt;a href=&quot;https://github.com/taijiweb/domcom&quot;&gt;Github project&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;Here is a code example provided by the developer to give a taste of Domcom:&lt;/p&gt;
&lt;p&gt;In javascript:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; {list, text, p, flow, see} = dc
    ​
    demoSum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a, b, comp, p1, t1, t2;

      a = see(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
      b = see(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);

      comp = list((t1 = text({
        value: a,
        onchange() { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); }

      })), (t2 = text({
        value: b,
        onchange() { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value * &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); }

      })), p1 = p(flow.add(a, b)));

      dc.updateWhen([t1, t2], &lt;span class=&quot;string&quot;&gt;'change'&lt;/span&gt;, p1);

      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; comp.mount();
    };
    ​
    demoSum();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the developer likes coffee-script is here the same example in coffee-script.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-coffeescript&quot;&gt;{list, text, p, flow, see} = dc
&lt;span class=&quot;function&quot;&gt;
&lt;span class=&quot;title&quot;&gt;demoSum&lt;/span&gt; = -&amp;gt;&lt;/span&gt;

    a = see &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; b = see &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;

    comp = list \
        (t1 = text &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: a, &lt;span class=&quot;attribute&quot;&gt;onchange&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&quot;property&quot;&gt;@value&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),
        (t2 = text &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: b, &lt;span class=&quot;attribute&quot;&gt;onchange&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;-&amp;gt;&lt;/span&gt; b &lt;span class=&quot;property&quot;&gt;@value&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;),
        p1 = p flow.add a, b

    dc.updateWhen [t1, t2], &lt;span class=&quot;string&quot;&gt;'change'&lt;/span&gt;, p1

    comp.mount()

demoSum()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>React Treebeard</title>
      <link>http://daily-javascript.com/articles/react-treebeard/</link>
      <pubDate>Thu, 12 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/react-treebeard/</guid>
      <author></author>
      <description>&lt;p&gt;React Treebeard (GitHub: &lt;a href=&quot;https://github.com/alexcurtis/react-treebeard&quot;&gt;alexcurtis/react-treebeard&lt;/a&gt;, License: MIT, npm: react-treebeard)&lt;/p&gt;
&lt;p&gt;Ever come a cross a task where you needed to quickly make a bunch of data explorable or where you needed to visualize a massive object?
Now there is React Treebeard which gives you a tree with collapsed leafs.&lt;/p&gt;
&lt;p&gt;So let’s say we have a batch of data like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myData = {
    name: &lt;span class=&quot;string&quot;&gt;'root'&lt;/span&gt;,
    toggled: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,
    children: [
        {
            name: &lt;span class=&quot;string&quot;&gt;'parent'&lt;/span&gt;,
            children: [
                {
                    name: &lt;span class=&quot;string&quot;&gt;'child'&lt;/span&gt;,
                    terminal: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
                }
            ]
        },
        {
            name: &lt;span class=&quot;string&quot;&gt;'loading parent'&lt;/span&gt;,
            loading: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
        },
        {
            name: &lt;span class=&quot;string&quot;&gt;'parent'&lt;/span&gt;,
            children: [
                {
                    name: &lt;span class=&quot;string&quot;&gt;'nested parent'&lt;/span&gt;,
                    children: [
                        {
                            name: &lt;span class=&quot;string&quot;&gt;'nested child'&lt;/span&gt;,
                            terminal: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
                        }
                    ]
                }
            ]
        }
    ]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then our component would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TreeExample&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;props&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
        &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Treebeard&lt;/span&gt;
            &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.data}&lt;/span&gt;
            &lt;span class=&quot;attribute&quot;&gt;onToggle&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{onToggle}&lt;/span&gt;
        /&amp;gt;&lt;/span&gt;
    )&lt;/span&gt;;
}

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; onToggle = () =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;// Implement custom behavior&lt;/span&gt;
};

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; shell = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'#shell'&lt;/span&gt;);
ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;TreeExample&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;myData&lt;/span&gt; }/&amp;gt;&lt;/span&gt;, shell);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the decorators it’s very easy for you to use your own Node Header, Toggle and Loading components.
This would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; decorators = {
    Loading: (props) =&amp;gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.style}&lt;/span&gt;&amp;gt;&lt;/span&gt;
                loading...
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        )&lt;/span&gt;;
    },
    Toggle: (props) =&amp;gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.style}&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.height}&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.width}&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    // Vector Toggle Here
                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;svg&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        )&lt;/span&gt;;
    },
    Header: (props) =&amp;gt; {
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
            &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{props.style}&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {props.node.name}
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        )&lt;/span&gt;;
    }
};

&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Treebeard&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{...}&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;decorators&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{decorators}&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you wanna see what this all looks like while running in the browser, check out the &lt;a href=&quot;http://alexcurtis.github.io/react-treebeard/#&quot;&gt;demo page&lt;/a&gt; provided by the developer.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Notie.js</title>
      <link>http://daily-javascript.com/articles/notie/</link>
      <pubDate>Wed, 11 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/notie/</guid>
      <author></author>
      <description>&lt;p&gt;Notie.js (GitHub: &lt;a href=&quot;https://github.com/jaredreich/notie.js&quot;&gt;jaredreich/notie.js&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;Notie.js is a simple notification plugin. It does not have any dependencies, which makes it very light and easy to work with.
Throughout time I’ve seen multiple libraries and UI frameworks implement something similar,
but what I like about this little library is that when you have a very small project, it can save you some time on implementing feedback to the user.&lt;/p&gt;
&lt;p&gt;Sadly it’s not available via npm or bower, but I think that is kind of the point this library is trying to make.
Everything nowadays is bundled and transpiled, which I like very much, but it is nice to see that some people still take this approach.&lt;/p&gt;
&lt;p&gt;So let’s include it in our markup like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;/path/to/notie.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now when you want to send a notification or confirm something with your user you can use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
notie.alert(style, &lt;span class=&quot;string&quot;&gt;'message'&lt;/span&gt;, time_in_seconds);

notie.confirm(&lt;span class=&quot;string&quot;&gt;'Title text'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Yes button text'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'No/cancel button text'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// User choose Yes.&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The style in this example would be the “theme” of the alert. By default these would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OK ( Green )&lt;/li&gt;
&lt;li&gt;Warning ( Yellowish )&lt;/li&gt;
&lt;li&gt;Error ( Red )&lt;/li&gt;
&lt;li&gt;Notice ( Blue )&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    <item>
      <title>Babel Typecheck</title>
      <link>http://daily-javascript.com/articles/babel-typecheck/</link>
      <pubDate>Tue, 10 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/babel-typecheck/</guid>
      <author></author>
      <description>&lt;p&gt;Babel Typecheck (GitHub: &lt;a href=&quot;https://github.com/codemix/babel-plugin-typecheck&quot;&gt;codemix/babel-plugin-typecheck&lt;/a&gt;, License: MIT, npm: babel-plugin-typecheck)&lt;/p&gt;
&lt;p&gt;Babel Typecheck is a &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; plugin for static and runtime type checking. It does so using &lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow type&lt;/a&gt;.
What it does is turn a code block like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMessage&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;to: User, message: string&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;boolean&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; socket.send(to, message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMessage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;to, message&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _socket$send;

  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(to &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; User)) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Value of argument 'to' violates contract.&quot;&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; message !== &lt;span class=&quot;string&quot;&gt;&quot;string&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Value of argument 'message' violates contract.&quot;&lt;/span&gt;);
  _socket$send = socket.send(to, message);
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; _socket$send !== &lt;span class=&quot;string&quot;&gt;&quot;boolean&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Function 'sendMessage' return value violates contract.&quot;&lt;/span&gt;);
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _socket$send;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this does is it executes the same as when you would write your function like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendMessage&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;to, message&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; socket.send(to, message);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But with one big difference, when you call this function with the wrong arguments your application just breaks.
When using Babel Typecheck it would present you with a type error on transpiling so you will not make silly mistakes again. Well not the type error kind at least.&lt;/p&gt;
&lt;p&gt;In the example above we see a few new things, mostly attached to the function call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    (to: User, message: string): boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which means that the &lt;code&gt;to&lt;/code&gt; parameter expects to be an instance of User.
The &lt;code&gt;message&lt;/code&gt; parameter expects to be a String.
The &lt;code&gt;:&lt;/code&gt; at the and of the function call is to indicate what the function will return which is a Boolean in this example.&lt;/p&gt;
&lt;p&gt;This function demonstrates which kinds of annotations are supported:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;
    aNum: number,
    anOptionalString: ?string, &lt;span class=&quot;comment&quot;&gt;// will allow null/undefined&lt;/span&gt;
    anObject: Object,
    aDate: Date,
    anError: Error,
    aUnionType: Object|string,
    aClass: User,
    aShape: {foo: number, bar: ?string},
    anArray: Array,
    arrayOf: string[] | Array&amp;lt;string&amp;gt;,
    {x, y}: {x: string, y: number}, &lt;span class=&quot;comment&quot;&gt;// destructuring works&lt;/span&gt;
    es6Defaults: number = 42
&lt;/span&gt;) : &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; aNum;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I saw the syntax of this plugin the first thing that jumped into my mind was why not just use Typescript then.
Since Typescript had it’s own upstream this might not be inline with the ESnext(ES6/ES7) feature we have grown to love.
By including this plugin in your &lt;code&gt;.babelrc&lt;/code&gt; to can have the power and security of strongly typed Javascript and all the new features provided by Babel.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Squiggle</title>
      <link>http://daily-javascript.com/articles/squiggle/</link>
      <pubDate>Mon, 09 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/squiggle/</guid>
      <author></author>
      <description>&lt;p&gt;Squiggle (GitHub: &lt;a href=&quot;https://github.com/wavebeem/squiggle&quot;&gt;wavebeem/squiggle&lt;/a&gt;, License: MIT, npm: squiggle-lang)&lt;/p&gt;
&lt;p&gt;Squiggle is a strict, expression-oriented, compile-to-JS programming language. Yes, yet another compile-to-JS language.
At the beginning I was sceptic about it, but once I started reading &lt;a href=&quot;http://squiggle-lang.org/tutorial&quot;&gt;the tutorial&lt;/a&gt; posted on the site I adjusted my opinion.
Not everything is there yet, but I need to say that I like the way it looks and might even consider picking it up.&lt;/p&gt;
&lt;p&gt;So some of the features that drew my attention are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arity checked functions&lt;ul&gt;
&lt;li&gt;When calling a function created in Squiggle with not enough arguments, it throws an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Frozen literals&lt;ul&gt;
&lt;li&gt;Array and object literals are frozen with &lt;code&gt;Object.freeze&lt;/code&gt; by default, so you can’t accidentally mutate them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Easy updates&lt;ul&gt;
&lt;li&gt;Operators &lt;code&gt;++&lt;/code&gt; to concatenate two arrays or two strings, and ~ to merge two objects into a new frozen object with the prototype of the first object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Destructuring assignment&lt;ul&gt;
&lt;li&gt;Grab object properties or array elements when you assign variables, like: &lt;code&gt;let [x, y] = [1, 2] or let {x, y} = {x: 1, y: 2}.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Pattern matching&lt;ul&gt;
&lt;li&gt;Is similar to the Javascript &lt;code&gt;switch&lt;/code&gt; but with destructuring power built-in and no dangerous fall-through.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;No type coercion&lt;ul&gt;
&lt;li&gt;Standard operators like &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and more, have been replaced with strict version that do not perform any type coercions, throwing exceptions on bad inputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Deep equality&lt;ul&gt;
&lt;li&gt;The operator == performs a deep equality check.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a lot more features which just make it work a bit nicer. If you want a good overview of what this language can do I would recommend you reading &lt;a href=&quot;http://squiggle-lang.org/tutorial&quot;&gt;the tutorial&lt;/a&gt; section of the website and then &lt;a href=&quot;http://squiggle-lang.org/try&quot;&gt;give it a shot in the browser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a small example provided by the developer in which you can see how it would work together met Node’s HTTP package.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; port = &lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; host = &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;

def handler(res, res) =
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; headers = {&lt;span class=&quot;string&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;}
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _ = res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, headers)
    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _ = res.end(&lt;span class=&quot;string&quot;&gt;&quot;Hello world\n&quot;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; server = http.createServer(handler)
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _ = server.listen(port, host)
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; _ = &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Server running at http://&quot;&lt;/span&gt; ++ host + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; ++ port ++ &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;)
&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since there is a comment section present after the latest update, I would love to here what you guys think of this and the blog in general.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ES6 Quiz</title>
      <link>http://daily-javascript.com/articles/es6-quiz/</link>
      <pubDate>Fri, 06 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/es6-quiz/</guid>
      <author></author>
      <description>&lt;p&gt;Today I will not be checking any new library. It is time to invest in some more in depth knowledge of how ES6/ES2015/ESnext works. This week I was checking my reddit feed looking for something awesome to show you all, when I stumbled across &lt;a href=&quot;http://perfectionkills.com/javascript-quiz-es6/?utm_source=javascriptweekly&amp;amp;utm_medium=email&quot;&gt;this quiz&lt;/a&gt; from Perfect Skills.&lt;/p&gt;
&lt;p&gt;I shared this quiz at my job and noticed that a lot of people were “familiar” with ES6. However nobody got a perfect score, Ok, the quiz is actually really hard, but still as frontend/javascript developer we should know the language we are working with or going to work with in the very near future. That is the reason why I would recommend everybody taking this quiz, because it will enlighten you on how much you do not know or fully understand about the new standard in Javascript.&lt;/p&gt;
&lt;p&gt;The answers and explanation can be found &lt;a href=&quot;https://gist.github.com/DmitrySoshnikov/3928607cb8fdba42e712&quot;&gt;here&lt;/a&gt;, but I recommend that you do not look at them before taking the test.&lt;/p&gt;
&lt;p&gt;I will be redoing this website over the weekend so I might not be able to provide you with a new post on Monday. The reason why I need to redo it, is because the static site generator I’m using to supply you with new posts each day broke on me this week. I spend several hours debugging without any luck so I will be switching to &lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;Wintersmith&lt;/a&gt; with which I only had good experiences so hopefully I do not need to redo it any time soon. I will also be looking into including a comment section so I can here more back from you guys.&lt;/p&gt;
&lt;p&gt;Thanks for all your loyal support and have a nice weekend.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>inHerito</title>
      <link>http://daily-javascript.com/articles/inherito/</link>
      <pubDate>Thu, 05 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/inherito/</guid>
      <author></author>
      <description>&lt;p&gt;inHerito (GitHub: &lt;a href=&quot;http://daily-javascript.com/articles/inherito/Ositoozy/inherito&quot;&gt;Ositoozy/inherito&lt;/a&gt;, License: BSD, bower: rot.js)&lt;/p&gt;
&lt;p&gt;inHerito is a compostable factory that allows you create objects you want ease and “correct” inheritance. It allows you to use properties and function methods from other objects without overusing and over inheriting. Every object that is created gets it’s own logging information if option is set to true and allows you to keep a mindful eye on your objects. This is my take on solving the original OOP problem of over inheriting. Now you have “Objects Linked to Other Objects” and inherit only if you say so.&lt;/p&gt;
&lt;p&gt;Then the first question that popped into my head was do we need yet another design pattern, well no ofcourse not but it could be useful for bootstrapping a new application to set the tone and get the correct mindset.&lt;/p&gt;
&lt;p&gt;As the developer claims:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Never be affraid again to have more than one level deep of inherited object inheritance tree. In OOP we usually create newer objects for the sake of inheritance and not for the sake of semantical correctness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex: Let’s consider a dog. A good and sane OOP developer would most likely create an abstract tree that resides the dog animal this way&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Animal &lt;span class=&quot;comment&quot;&gt;// And Followed by animal properties (ex blood, heart, etc.)&lt;/span&gt;
Animal.k9.dog &lt;span class=&quot;comment&quot;&gt;// And Followed by dog properties (bark, bite, age, how many legs, etc.)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;But let’s say in that same program we want to make the robot dog, which semantically inherits a of the dog’s properties to begin with. But we know semantically that robot dog belongs basically from two classes. It’s not an Animal anymore but shares a lot with dog.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; robotDog = dog.create({
    inherit: [bite, bark],
    material: metal
});

Is it a dog? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
Is it a robot? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This project currently is very young but I like the direction where it is going. Momentairley it can be used as a base template by just cloning the repo. Sadly there are no other ways to generate a project holding this methodologies but as the developer tells me there will be in the future.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rot.js</title>
      <link>http://daily-javascript.com/articles/rotjs/</link>
      <pubDate>Wed, 04 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/rotjs/</guid>
      <author></author>
      <description>&lt;p&gt;Rot.js (GitHub: &lt;a href=&quot;https://github.com/ondras/rot.js&quot;&gt;ondras/rot.js&lt;/a&gt;, License: BSD, bower: rot.js)&lt;/p&gt;
&lt;p&gt;Rot.js is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot;&gt;Roguelike&lt;/a&gt; Toolkit in JavaScript.
In a nutshell it is a set of JavaScript libraries, designed to help with a roguelike development in browser environment.
It is modeled after &lt;a href=&quot;http://doryen.eptalys.net/libtcod/&quot;&gt;libtcod&lt;/a&gt; and offers the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS prototype enhancements&lt;/li&gt;
&lt;li&gt;RNG, Map generation, FOV, Lighting&lt;/li&gt;
&lt;li&gt;Pathfinding, turn scheduling  &lt;/li&gt;
&lt;li&gt;Canvas-based ASCII display&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It comes with some very &lt;a href=&quot;http://ondras.github.io/rot.js/doc/&quot;&gt;extensive documentation&lt;/a&gt; and has a &lt;a href=&quot;http://www.roguebasin.com/index.php?title=Rot.js_tutorial&quot;&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Keo</title>
      <link>http://daily-javascript.com/articles/keo/</link>
      <pubDate>Tue, 03 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/keo/</guid>
      <author></author>
      <description>&lt;p&gt;Keo (GitHub: &lt;a href=&quot;https://github.com/Wildhoney/Keo&quot;&gt;Wildhoney/Keo&lt;/a&gt;, License: MIT, npm: keo)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/Wildhoney/Keo/raw/master/media/screenshot.png&quot; alt=&quot;https://github.com/Wildhoney/Keo/raw/master/media/screenshot.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you are like me and don’t like the ESnext syntactic sugar which gets used in most React examples nowadays, then you will like Keo.
Keo gives you a more functional approach to creating React components.&lt;/p&gt;
&lt;p&gt;The advantages gained by using Keo are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Steer away from &lt;code&gt;class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create referentially transparent, pure functions without this&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;export&lt;/code&gt; to export plain functions for simpler unit-testing&lt;/li&gt;
&lt;li&gt;Simple composing of functions for mixin support&lt;/li&gt;
&lt;li&gt;Avoid functions being littered with React specific method calls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keo’s philosophy is that you should not have to worry about the &lt;code&gt;this&lt;/code&gt; keyword (even though scoping has became a lot better since ES2015). As such, Keo takes a more &lt;a href=&quot;https://github.com/dekujs/deku&quot;&gt;Deku&lt;/a&gt; approach in that items such as props, state, setState, et cetera are passed in to some &lt;a href=&quot;https://facebook.github.io/react/docs/component-specs.html&quot;&gt;React lifecycle functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The React lifecycle functions such as: &lt;code&gt;componentWillMount&lt;/code&gt;, &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentWillUnmount&lt;/code&gt;, &lt;code&gt;render&lt;/code&gt; will receive props, state, setState and dispatch as an object which can be destructured.&lt;/p&gt;
&lt;p&gt;When you have created your component, Keo encourages you to &lt;code&gt;export&lt;/code&gt; all functions so that you can test each one individually, but &lt;strong&gt;demands&lt;/strong&gt; that you export the lifecycle functions by invoking keo.stitch like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {stitch} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'keo'&lt;/span&gt;;
&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; stitch({ componentDidMount, render });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could still use Redux with Keo. Keo provides a &lt;code&gt;keo/redux&lt;/code&gt; adapter for handling Redux in a more succinct fashion. Instead of importing keo you can import the keo/redux adapter and use the &lt;code&gt;stitch&lt;/code&gt; function from there instead like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {stitch} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'keo/redux'&lt;/span&gt;;
&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; stitch({ componentWillMount, render }, state =&amp;gt; state.zombies);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Stream.js</title>
      <link>http://daily-javascript.com/articles/streamjs/</link>
      <pubDate>Mon, 02 Nov 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/streamjs/</guid>
      <author></author>
      <description>&lt;p&gt;Stream.js (GitHub: &lt;a href=&quot;https://github.com/winterbe/streamjs&quot;&gt;winterbe/streamjs&lt;/a&gt;, License: MIT, npm: streamjs, bower: streamjs)&lt;/p&gt;
&lt;p&gt;Stream.js is a lightweight functional library for operating on in memory collections. It requires ES 5+, but has built-in support for ES6 features it works in all current browsers, Node.js and Java 8 &lt;a href=&quot;http://openjdk.java.net/projects/nashorn/&quot;&gt;Nashorn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This library is built around a lazily evaluated operation pipeline. Which means that instead of consecutively performing each operation on the input collection, objects are passed vertically and one by one into the chain.
Interim results will not be stored in internal collections. Instead objects are piped into the result object.&lt;/p&gt;
&lt;p&gt;Stream’s operations are lazily evaluated to avoid examining all of the input data when it’s not necessary.
For instance with a filter - map - findFirst stream you don’t have to filter and map the whole data. Instead map and findFirst are executed just one time before returning the single result. This results in way better performance when operation upon large amount of input.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Stream([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])
   .filter((num) =&amp;gt; {   &lt;span class=&quot;comment&quot;&gt;// called twice&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
   })
   .map((even) =&amp;gt; {     &lt;span class=&quot;comment&quot;&gt;// called once&lt;/span&gt;
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;even&quot;&lt;/span&gt; + even;
   })
   .findFirst();        &lt;span class=&quot;comment&quot;&gt;// called once&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this library has a very extensive API, I will not be discussing that today and I will just refer you to the &lt;a href=&quot;https://github.com/winterbe/streamjs/blob/master/APIDOC.md&quot;&gt;API Docs&lt;/a&gt; provided by the developer&lt;/p&gt;
</description>
    </item>
    <item>
      <title>generator-redux</title>
      <link>http://daily-javascript.com/articles/redux-generator/</link>
      <pubDate>Thu, 29 Oct 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/redux-generator/</guid>
      <author></author>
      <description>&lt;p&gt;generator-redux (GitHub: &lt;a href=&quot;https://github.com/banderson/generator-redux&quot;&gt;banderson/generator-redux&lt;/a&gt;, License: MIT, npm: generator-redux)&lt;/p&gt;
&lt;p&gt;Today I like to mention a Yeoman generator which I’ve being using a lot lately: generator-redux.
When you are not familiar with Yeoman please check it out, it will save you a lot of time.&lt;/p&gt;
&lt;p&gt;You have probably heard about &lt;a href=&quot;http://daily-javascript.com/articles/redux-generator/facebook.github.io/flux/&quot;&gt;Facebook’s Flux architecture&lt;/a&gt;. Since a few months there is a new kid in town called Redux.
&lt;a href=&quot;https://github.com/rackt/redux&quot;&gt;Redux&lt;/a&gt; is &lt;a href=&quot;http://youtube.com/watch?v=xsSnOQynTHs&quot;&gt;“Atomic Flux with hot reloading”&lt;/a&gt;. A next-generation take on the Flux pattern with some core design differences such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Preserves the benefits of Flux, but adds other nice properties thanks to its functional nature.&lt;/li&gt;
&lt;li&gt;Prevents some of the anti-patterns common in Flux code.&lt;/li&gt;
&lt;li&gt;Works great in universal (aka “isomorphic”) apps because it doesn’t use singletons and the data can be rehydrated. …&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;The features included in this generator are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redux functional application architecture&lt;/li&gt;
&lt;li&gt;Redux-DevTools configured and enabled when in dev mode&lt;/li&gt;
&lt;li&gt;WebPack for build pipeline and dev server awesomeness&lt;/li&gt;
&lt;li&gt;Babel transpiler so you can use bleeding edge language features&lt;/li&gt;
&lt;li&gt;PostCSS preprocessor with autoprefixer support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Offcourse this generator depends on &lt;code&gt;yo&lt;/code&gt; being installed globally. Once you have that you can acquire it via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm install -g generator-redux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the generator is installed you can access it via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;yo redux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give you a prompt asking you for an application name, description and a port.
Description is used in package.json and the generated README.md.
Port is to run your development server on (defaults to 3000).&lt;/p&gt;
&lt;p&gt;To start the scaffold app use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you wanna run it with the Redux-DevTools enabled use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;DEBUG=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; npm start
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>vstack-validator</title>
      <link>http://daily-javascript.com/articles/vstack-validator/</link>
      <pubDate>Wed, 28 Oct 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/vstack-validator/</guid>
      <author></author>
      <description>&lt;p&gt;Vstack-validator (GitHub: &lt;a href=&quot;https://github.com/vslinko/vstack-validator&quot;&gt;vslinko/vstack-validator&lt;/a&gt;, License: MIT, npm: vstack-validator)&lt;/p&gt;
&lt;p&gt;When you are working with very complex and deeply nested data structures, validation can become a real pain.
Vstack-validator tries to solve this problem by providing you with a declarative API which consists of 3 methods: a validator, a constraint and a schema.
The Validator is a function that receives a value and returns boolean result of validation.
Constraint is a function that receives a value and returns validation metadata.
With a Schema we create declarations of the constraints in a tree, which in turn can be used to validate an object, which would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; {schema} &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'vstack-validator'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; userSchema = schema.type(&lt;span class=&quot;string&quot;&gt;'user'&lt;/span&gt;, {
    email: {
        notEmpty: schema.constraint(schema.validators.isNotEmpty, &lt;span class=&quot;string&quot;&gt;'Email is empty'&lt;/span&gt;),
        email: schema.constraint(schema.validators.isEmail, &lt;span class=&quot;string&quot;&gt;'Email is not valid'&lt;/span&gt;),
    },
    password: schema.optional({
        notEmpty: schema.constraint(schema.validators.isNotEmpty, &lt;span class=&quot;string&quot;&gt;'Password is empty'&lt;/span&gt;),
        minLength: schema.minLength(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Password is less than 3'&lt;/span&gt;),
    }),
});

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; itemSchema = schema.type(&lt;span class=&quot;string&quot;&gt;'item'&lt;/span&gt;, {
    name: {
        notEmpty: schema.constraint(schema.validators.isNotEmpty, &lt;span class=&quot;string&quot;&gt;'Name is empty'&lt;/span&gt;),
    },
});

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cartSchema = schema.type(&lt;span class=&quot;string&quot;&gt;'cart'&lt;/span&gt;, {
    user: userSchema,
    items: schema.list(itemSchema),
});

&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; validationData = {
    user: {
        email: &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
        password: &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;,
    },
    items: [
        { name: &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt; },
    ],
};

cartSchema.check(validationData)
          .then((constraintResult) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(constraintResult));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the &lt;code&gt;check&lt;/code&gt; is executed &lt;code&gt;constraintResult&lt;/code&gt; it would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
    valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    message: &lt;span class=&quot;string&quot;&gt;'Objectisnotvalid'&lt;/span&gt;,
    children: {
        user: {
            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
            message: &lt;span class=&quot;string&quot;&gt;'Objectisnotvalid'&lt;/span&gt;,
            children: {
                email: {
                    valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                    message: &lt;span class=&quot;string&quot;&gt;'Valueisnotvalid'&lt;/span&gt;,
                    children: {
                        notEmpty: {
                            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                            message: &lt;span class=&quot;string&quot;&gt;'Emailisempty'&lt;/span&gt;,
                            children: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
                        },
                        email: {
                            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                            message: &lt;span class=&quot;string&quot;&gt;'Emailisnotvalid'&lt;/span&gt;,
                            children: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
                        }
                    }
                },
                password: {
                    valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                    message: &lt;span class=&quot;string&quot;&gt;'Valueisnotvalid'&lt;/span&gt;,
                    children: {
                        notEmpty: {
                            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                            message: &lt;span class=&quot;string&quot;&gt;'Passwordisempty'&lt;/span&gt;,
                            children: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
                        },
                        minLength: {
                            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                            message: &lt;span class=&quot;string&quot;&gt;'Passwordislessthan3'&lt;/span&gt;,
                            children: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
                        }
                    }
                }
            }
        },
        items: {
            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
            message: &lt;span class=&quot;string&quot;&gt;'Arrayisnotvalid'&lt;/span&gt;,
            children: [
                {
                    valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                    message: &lt;span class=&quot;string&quot;&gt;'Objectisnotvalid'&lt;/span&gt;,
                    children: {
                        name: {
                            valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                            message: &lt;span class=&quot;string&quot;&gt;'Valueisnotvalid'&lt;/span&gt;,
                            children: {
                                notEmpty: {
                                    valid: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
                                    message: &lt;span class=&quot;string&quot;&gt;'Nameisempty'&lt;/span&gt;,
                                    children: &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
                                }
                            }
                        }
                    }
                }
            ]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>jsdoc2diagram</title>
      <link>http://daily-javascript.com/articles/jsdoc2diagram/</link>
      <pubDate>Tue, 27 Oct 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/jsdoc2diagram/</guid>
      <author></author>
      <description>&lt;p&gt;jsdoc2diagram (GitHub: &lt;a href=&quot;https://github.com/amcmillan01/jsdoc2diagram&quot;&gt;amcmillan01/jsdoc2diagram&lt;/a&gt;, License: MIT, npm: jsdoc2diagram)&lt;/p&gt;
&lt;p&gt;If your day job looks anything like mine, the problem of sharing knowledge will be a well known issue for you.
We try our best to keep the docs up to date and inform our co-workers of any changes that would be crucial. But what if a new developer joins the team? He will be spending the next week or 2 getting the know the entire app but mostly how everything hangs together.&lt;/p&gt;
&lt;p&gt;Since we are probably already using &lt;a href=&quot;http://usejsdoc.org&quot;&gt;JSDoc&lt;/a&gt; there is a great addition available for giving insight on how the application is put together called &lt;code&gt;jsdoc2diagram&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What jsdoc2diagram does is literally what the name implies it does. It turns JSDocs documentation into graphs using &lt;a href=&quot;http://daily-javascript.com/articles/jsdoc2diagram/d3js.org&quot;&gt;d3.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an example of the kind of graph it would present you with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/amcmillan01/jsdoc2diagram/raw/master/example/diagram.png&quot; style=&quot;max-width: 756px; width: 100%; position:static;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The for for this diagram looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**
 * @constructor
 */&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Garage = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

};

&lt;span class=&quot;comment&quot;&gt;/**
 * @return {number}
 */&lt;/span&gt;
Garage.prototype.getVehicleCount = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

};


&lt;span class=&quot;comment&quot;&gt;/**
 *
 * @constructor
 * @memberof Garage
 */&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Car = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
  &lt;span class=&quot;comment&quot;&gt;/**
   *
   * @type {string}
   */&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;;
  &lt;span class=&quot;comment&quot;&gt;/**
   *
   * @type {string}
   */&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;;
};

&lt;span class=&quot;comment&quot;&gt;/**
 * @return {boolean}
 */&lt;/span&gt;
Car.prototype.isOn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

};

&lt;span class=&quot;comment&quot;&gt;/**
 * @return {boolean}
 */&lt;/span&gt;
Car.prototype.hasNavigation = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is a great addition to every bit of documentation. It gives a clear overview of how objects and methods are in relation to each other, which is something I was really missing.&lt;/p&gt;
&lt;p&gt;To get started using this you will need to have &lt;code&gt;jsdoc&lt;/code&gt; installed once you have that you only need to install &lt;code&gt;jsdoc2diagram&lt;/code&gt; via npm and then you could use it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;jsdoc -t PATH/TO/jsdoc2diagram -r JS_SOURCE_DIR/FILE &lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt; OUTPUT_DIR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could imagine that you would call this from an npm run script after your JSDocs are generated.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>React DOM Stream</title>
      <link>http://daily-javascript.com/articles/react-dom-stream/</link>
      <pubDate>Mon, 26 Oct 2015 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/react-dom-stream/</guid>
      <author></author>
      <description>&lt;p&gt;React DOM Stream (GitHub: &lt;a href=&quot;https://github.com/aickin/react-dom-stream&quot;&gt;aickin/react-dom-stream&lt;/a&gt;, License: MIT, npm: react-dom-stream)&lt;/p&gt;
&lt;p&gt;react-dom-stream is a React renderer for generating markup on a NodeJS server. Unlike the built-in ReactDOM.renderToString, this module renders to a stream.
Streams make this library as much as 47% faster in sending down a full page than ReactDOM.renderToString.&lt;/p&gt;
&lt;p&gt;One difficulty with ReactDOM.renderToString is that it is synchronous, which could cost you performance with server-side rendering of React sites. Especially true with large HTML payloads. Which could lead to the following problems as the developer saids:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The server cannot send out any part of the response until all the HTML is created, which means that browsers can’t start working on painting the page until the renderToString call is done. With larger pages, this can introduce a latency of hundreds of milliseconds.&lt;/li&gt;
&lt;li&gt;The server has to allocate memory for the entire HTML string.&lt;/li&gt;
&lt;li&gt;One call to ReactDOM.renderToString can dominate the CPU and starve out other requests. This is particularly troublesome on servers that serve a mix of small and large pages.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;react-dom-stream tries to fix those problems for us.&lt;/p&gt;
&lt;p&gt;Let’s take a look, To use the server-side methods, we’ll need to require &lt;code&gt;react-dom-stream/server&lt;/code&gt;.
To render an &lt;code&gt;element&lt;/code&gt; as a &lt;code&gt;stream&lt;/code&gt; using express we would use the &lt;code&gt;renderToString&lt;/code&gt; method. This would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOMStream = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom-stream/server&quot;&lt;/span&gt;);

app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;{
    ReactDOMStream.renderToString(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;prop&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{value}&lt;/span&gt;/&amp;gt;&lt;/span&gt;, res)
        .then(function(hash) {
            // TODO: write the hash out to the page in a script tag
            res.end();
        });
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you are working with static pages where you don’t intend to use React to render on the client side you could use the &lt;code&gt;renderToStaticMarkup&lt;/code&gt; method to generates smaller sized markup than &lt;code&gt;renderToString&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Again with an express example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOMStream = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom-stream/server&quot;&lt;/span&gt;);

app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;{
    ReactDOMStream.renderToStaticMarkup(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;prop&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{value}&lt;/span&gt;/&amp;gt;&lt;/span&gt;, res)
        .then(function() {
            res.end();
        });
});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you are generating server markup using &lt;code&gt;react-dom-stream&lt;/code&gt;, &lt;em&gt;you cannot use the standard ReactDOM.render;&lt;/em&gt; you must use the render method in &lt;code&gt;react-dom-stream&lt;/code&gt;. The difference between react-dom’s version and this one is that this render also takes in the hash returned from &lt;code&gt;renderToString&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ReactDOMStream = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;react-dom-stream&quot;&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = &lt;span class=&quot;number&quot;&gt;1234567890&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// returned from renderToString's promise and read out into the page&lt;/span&gt;
ReactDOMStream.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;prop&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{value}&lt;/span&gt;/&amp;gt;&lt;/span&gt;, document.getElementById(&quot;bar&quot;), hash);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Observatory</title>
      <link>http://daily-javascript.com/articles/observatory/</link>
      <pubDate>Thu, 22 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/observatory/</guid>
      <author></author>
      <description>&lt;p&gt;Observatory (GitHub: &lt;a href=&quot;https://github.com/mikesizz/observatory&quot;&gt;mikesizz/observatory&lt;/a&gt;, License: MIT, npm: observatoryjs)&lt;/p&gt;
&lt;p&gt;When you are following the spec proposals or read any other blog you have probably heard about &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe&quot;&gt;Object.observe&lt;/a&gt;, which is used for asynchronously observing the changes to an object.&lt;/p&gt;
&lt;p&gt;Observatory is an attempt to provide javascript developers an interface for Object.observe with mongodb style querying for specificity.&lt;/p&gt;
&lt;p&gt;In order to use it we need to create a new instance of Observatory.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Observatory &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'Observatory'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; observer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Observatory();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can observe an object by binding an event to it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;observer.on( object , query , callback );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently it supports the following events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$update which observes events that include an update to a queried property&lt;/li&gt;
&lt;li&gt;$add which observes events that include an addition to a queried property&lt;/li&gt;
&lt;li&gt;$delete which observes events that include an deletion from a queried property&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The real power is within the query expressions, by using different selectors you can create an expression for more specific event handling.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cat = {
    age: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;
};

observer.on( cat , { $update: { &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: { $gt: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; } } } , () =&amp;gt; {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Your cat is older than 10&quot;&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It provides the following value selectors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$lt - check if the property is less than the query value&lt;/li&gt;
&lt;li&gt;$gte - check if the property is greater than or equal to the query value&lt;/li&gt;
&lt;li&gt;$lte - check if the property is less than or equal to the query value&lt;/li&gt;
&lt;li&gt;$eq - check if the property is equal to the query value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For arrays it has a couple extra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$in - check if the target array contains any of the query values after the event fires&lt;/li&gt;
&lt;li&gt;$all - check if the target array contains all of the query values after the event fires&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Rollup.js</title>
      <link>http://daily-javascript.com/articles/roll-up/</link>
      <pubDate>Wed, 21 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/roll-up/</guid>
      <author></author>
      <description>&lt;p&gt;Rollup.js (GitHub: &lt;a href=&quot;https://github.com/rollup/rollup&quot;&gt;rollup/rollup&lt;/a&gt;, License: MIT, npm: rollup)&lt;/p&gt;
&lt;p&gt;Rollup is a next-generation Javascript module bundler. Build your app or library using ES2015 modules, then efficiently bundle them up into a single file for use in browsers and Node.js.
This is not an unfamiliar concept to the most of us. What makes Rollup stand out is that fact that it’s using only the functionality that you import.&lt;/p&gt;
&lt;p&gt;Normally you would do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; util = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'util'&lt;/span&gt;);
util.ajax(&lt;span class=&quot;string&quot;&gt;'http://some-api.com/?q=DailyJavascript'&lt;/span&gt;).then( handleData );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What this does is include the entire module &lt;code&gt;util&lt;/code&gt; but we only use the &lt;code&gt;ajax&lt;/code&gt; method. This will increase the total size of our app.
Now there is ES2015 module loading which allows us to include only the functions we need like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; { ajax } &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'util'&lt;/span&gt;;
ajax(&lt;span class=&quot;string&quot;&gt;'http://some-api.com/?q=DailyJavascript'&lt;/span&gt;).then( handleData );
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we build the second example, with for instance Browserify, what would happen is that the entire module would still get loaded. Kinda beats the point of using &lt;code&gt;import&lt;/code&gt; right?
Luckily there is Rollup to the rescue which will only build that what you need.&lt;/p&gt;
&lt;p&gt;For the moment it only provides a command line interface which you can acquire via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm i rollup -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The usage is pretty straight forward.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create a self-executing bundle...&lt;/span&gt;
rollup --format iife -- src/app.js &amp;gt; build/app.js

&lt;span class=&quot;comment&quot;&gt;# ...with inline sourcemaps:&lt;/span&gt;
rollup &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; iife --sourcemap inline -- src/app.js &amp;gt; build/app.js

&lt;span class=&quot;comment&quot;&gt;# create a bundle with dependencies on jQuery and Angular,&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# with a sourcemap in a separate file&lt;/span&gt;
rollup &lt;span class=&quot;operator&quot;&gt;-f&lt;/span&gt; iife --globals jquery:jQuery,angular:ng \
  -i src/app.js -o build/app.js -m build/app.js.map
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more commands check out the &lt;code&gt;--help&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you could use rollup command from an npm run script cntext, you can install it as a devDependency using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm i rollup -D
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>λJSON</title>
      <link>http://daily-javascript.com/articles/ljson/</link>
      <pubDate>Tue, 20 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/ljson/</guid>
      <author></author>
      <description>&lt;p&gt;λJSON (GitHub: &lt;a href=&quot;https://github.com/MaiaVictor/LJSON&quot;&gt;MaiaVictor/LJSON&lt;/a&gt;, License: MIT, npm: ljson)&lt;/p&gt;
&lt;p&gt;λJSON is a drop-in replacement for JSON which also allows you to parse and stringify pure functions and their contents. There are good security reasons for functions to be out of the JSON specs, but most of those are only significant when you allow arbitrary, side-effective programs.
With pure functions, one is able to interchange code while still being as safe as with regular JSON.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; LJSON = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;LJSON&quot;&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// `newPlayer` is a function and couldn't be serialized with JSON.&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newPlayer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        name      : name,
        hp        : &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;,
        atk       : &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,
        def       : &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,
        inventory : []}
};

&lt;span class=&quot;comment&quot;&gt;// LJSON has no trouble doing it because `newPlayer` is pure.&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; newPlayerSource = LJSON.stringify(newPlayer);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; John            = LJSON.parse(newPlayerSource)(&lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;);

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Serialized λJSON: &quot;&lt;/span&gt; + newPlayerSource);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Parsed and applied: &quot;&lt;/span&gt; + John);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
&lt;span class=&quot;comment&quot;&gt;//Serialized λJSON: (function(v0){return {name:v0,hp:12,atk:5,def:5,inventory:[]}})&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;//Parsed and applied: { name: 'John', hp: 12, atk: 5, def: 5, inventory: [] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The fact you have to explicitly provide primitives to LJSON functions is what gives you confidence they won’t do any nasty thing such as stealing your password, mining bitcoins or launching missiles. LJSON functions can only do what you give them power to. You are still able to serialize side-effective functions, but the side effects will happen on the act of the serialization and get stripped from the serialized output.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nastyPair&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;booom&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; {
        fst : a,
        snd : (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nastyId&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; ++i)
                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;mwahahhahha&quot;&lt;/span&gt;);
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;
        })(b)};
};

&lt;span class=&quot;comment&quot;&gt;// output:&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// booom&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// mwahahhahha&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// mwahahhahha&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// mwahahhahha&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// (function(v0,v1){return {fst:v0,snd:v1})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Vorpal.js</title>
      <link>http://daily-javascript.com/articles/vorpal/</link>
      <pubDate>Mon, 19 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/vorpal/</guid>
      <author></author>
      <description>&lt;p&gt;Vorpal (GitHub: &lt;a href=&quot;https://github.com/dthree/vorpal&quot;&gt;dthree/vorpal&lt;/a&gt;, License: MIT, npm: vorpal)&lt;/p&gt;
&lt;p&gt;Vorpal is a framework for building interactive CLI applications. Inspired and based on &lt;a href=&quot;https://www.npmjs.com/package/commander&quot;&gt;commander.js&lt;/a&gt; which is a port from the wonderful work done on this &lt;a href=&quot;https://github.com/commander-rb/commander&quot;&gt;Ruby Gem&lt;/a&gt;.
It provides you with an interactive prompt provided by &lt;a href=&quot;https://www.npmjs.com/package/inquirer&quot;&gt;inquirer&lt;/a&gt; and also provides a very extensive API with features such as: piped commands, command history, built-in help menu, tab autocompletion and the list goes on.&lt;/p&gt;
&lt;p&gt;For full documentation of the API you should take a look at the &lt;a href=&quot;https://github.com/dthree/vorpal/wiki&quot;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Getting started with Vorpal.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; vorpal &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'vorpal'&lt;/span&gt;

const program = vorpal();

program
  .command(&lt;span class=&quot;string&quot;&gt;'foo'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Outputs &quot;bar&quot;'&lt;/span&gt;)
  .action((args, callback) =&amp;gt; {
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'bar'&lt;/span&gt;);
    callback();
  });

program
  .delimiter(&lt;span class=&quot;string&quot;&gt;'app $'&lt;/span&gt;)
  .show();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates an instance of Vorpal, adds a command which logs “bar”, sets the prompt delimiter to say “app $”, and shows the prompt.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Smartcrop.js</title>
      <link>http://daily-javascript.com/articles/smart-crop/</link>
      <pubDate>Wed, 14 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/smart-crop/</guid>
      <author></author>
      <description>&lt;p&gt;Smartcrop (GitHub: &lt;a href=&quot;https://github.com/jwagner/smartcrop.js&quot;&gt;jwagner/smartcrop.js&lt;/a&gt;, License: MIT, npm: smartcrop, bower: smartcrop)&lt;/p&gt;
&lt;p&gt;Smartcrop.js is not just another image cropping library. It detects the primary region of an image such as faces.
It does this using the following algorithm.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find edges using &lt;a href=&quot;https://en.wikipedia.org/wiki/Laplace&amp;#39;s_method&quot;&gt;Laplace method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Find regions with a color like skin&lt;/li&gt;
&lt;li&gt;Find regions high in saturation&lt;/li&gt;
&lt;li&gt;Generate a set of candidate crops using a sliding window&lt;/li&gt;
&lt;li&gt;Rank them using a importance function to focus the detail in the center and avoid it in the edges.&lt;/li&gt;
&lt;li&gt;Output the candidate crop with the highest rank&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using it in a simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;SmartCrop.crop(image, {width: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, height: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;}, result =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result) );
&lt;span class=&quot;comment&quot;&gt;// Which will return&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// -&amp;gt; {topCrop: {x: 300, y: 200, height: 200, width: 200}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you wanna use it within node.js you would have to do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Canvas &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'canvas'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SmartCrop &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'smartcrop'&lt;/span&gt;;

SmartCrop.crop(img, options, result =&amp;gt; {
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(result, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(output &amp;amp;&amp;amp; options.width &amp;amp;&amp;amp; options.height){
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; canvas = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Canvas(options.width, options.height),
            ctx = canvas.getContext(&lt;span class=&quot;string&quot;&gt;'2d'&lt;/span&gt;),
            crop = result.topCrop,
            f = fs.createWriteStream(output);
        ctx.patternQuality = &lt;span class=&quot;string&quot;&gt;'best'&lt;/span&gt;;
        ctx.filter = &lt;span class=&quot;string&quot;&gt;'best'&lt;/span&gt;;
        ctx.drawImage(img, crop.x, crop.y, crop.width, crop.height, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, canvas.width, canvas.height);
        canvas.syncJPEGStream({quality: quality}).pipe(f);
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Smartcrop.js also offers a command line interface under the npm package name &lt;a href=&quot;https://github.com/jwagner/smartcrop-cli&quot;&gt;&lt;code&gt;smartcrop-cli&lt;/code&gt;&lt;/a&gt;. Which based uses node-canvas.&lt;/p&gt;
&lt;p&gt;That one you would use like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;npm i smartcrop-cli -g
smartcrop-cli --width &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; --height &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; photo.jpg square-thumbnail.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Smartcrop-cli does requires &lt;a href=&quot;https://github.com/Automattic/node-canvas&quot;&gt;node-canvas&lt;/a&gt; which requires local libraries to be installed. Refer to the &lt;a href=&quot;https://github.com/Automattic/node-canvas/wiki/_pages&quot;&gt;node-canvas wiki&lt;/a&gt; installation instructions.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Chiffon</title>
      <link>http://daily-javascript.com/articles/chiffon/</link>
      <pubDate>Wed, 14 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/chiffon/</guid>
      <author></author>
      <description>&lt;p&gt;Chiffon (GitHub: &lt;a href=&quot;https://github.com/trueadm/Chiffon&quot;&gt;polygonplanet/Chiffon&lt;/a&gt;, License: MIT, npm: chiffon, bower: chiffon)&lt;/p&gt;
&lt;p&gt;Chiffon is a very small ECMAScript parser, tokenizer and minifier.
Sometimes we come across an idea where you will need to parse or tokenize Javascript files for, for instance to do analysis on the code.&lt;/p&gt;
&lt;p&gt;When using Chiffon for tokenizing you will get an Array of each “element” of the input code like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tokens = Chiffon.tokenize(&lt;span class=&quot;string&quot;&gt;'var a = 1'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which would then return:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;[ { type: &lt;span class=&quot;string&quot;&gt;'Keyword'&lt;/span&gt;,    value: &lt;span class=&quot;string&quot;&gt;'var'&lt;/span&gt; },
  { type: &lt;span class=&quot;string&quot;&gt;'Identifier'&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt; },
  { type: &lt;span class=&quot;string&quot;&gt;'Punctuator'&lt;/span&gt;, value: &lt;span class=&quot;string&quot;&gt;'='&lt;/span&gt; },
  { type: &lt;span class=&quot;string&quot;&gt;'Numeric'&lt;/span&gt;,    value: &lt;span class=&quot;string&quot;&gt;'1'&lt;/span&gt; } ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is a list of all possible tokens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment&lt;/li&gt;
&lt;li&gt;LineTerminator&lt;/li&gt;
&lt;li&gt;Template&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Punctuator&lt;/li&gt;
&lt;li&gt;RegularExpression&lt;/li&gt;
&lt;li&gt;Numeric&lt;/li&gt;
&lt;li&gt;UnicodeEscapeSequence&lt;/li&gt;
&lt;li&gt;Identifier&lt;/li&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Keyword&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sadly JavaScript AST is not currently supported.&lt;/p&gt;
&lt;p&gt;When you wish to “untokenize” the Array, you can pass it into the &lt;code&gt;untokenize&lt;/code&gt; method like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Chiffon.untokenize
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you want to use the minification, you would do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Chiffon.minify(&lt;span class=&quot;string&quot;&gt;'var a = 1 + 1; // comment'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is a simple implementation of &lt;code&gt;untokenize&lt;/code&gt; and &lt;code&gt;tokenize&lt;/code&gt; together like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minify&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; untokenize(tokenize(code, { lineTerminator: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; }));
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>t7</title>
      <link>http://daily-javascript.com/articles/t7/</link>
      <pubDate>Tue, 13 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/t7/</guid>
      <author></author>
      <description>&lt;p&gt;t7 (GitHub: &lt;a href=&quot;https://github.com/trueadm/t7&quot;&gt;trueadm/t7&lt;/a&gt;, License: ISC, npm: t7)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://t7js.com/img/screenshot.png&quot; style=&quot;max-width: 400px;width: 100%;left: 0;&quot;&gt;&lt;/p&gt;
&lt;p&gt;While browsing I came across t7, which is a template library that compiles template strings into virtual DOM objects.
Because of this functionality it’s used in frameworks such as &lt;a href=&quot;https://github.com/trueadm/inferno&quot;&gt;Inferno&lt;/a&gt;, but it can also be used within React.&lt;/p&gt;
&lt;p&gt;There are multiple ways to work with t7. You could include the script on your page the old school way like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;t7.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and you can build it with &lt;a href=&quot;http://daily-javascript.com/articles/t7/&quot;&gt;Browserify&lt;/a&gt; or &lt;a href=&quot;http://daily-javascript.com/articles/t7/&quot;&gt;Webpack&lt;/a&gt; by installing it via npm and require it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; t7 &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'t7'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s make a page with it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;const items = ['Pizza', 'Kebab', 'Donut'];
const welcome = 'to the wonderful world of t7';

t7`
  &amp;lt;div class=&quot;foo&quot;&amp;gt;
    &amp;lt;h1&amp;gt;Welcome ${ welcome }&amp;lt;/h1&amp;gt;
    &amp;lt;ul&amp;gt;
      ${
        items.map( item =&amp;gt; t7`
          &amp;lt;li class=&quot;item&quot;&amp;gt;
            &amp;lt;span&amp;gt;The item is: ${ item }&amp;lt;/span&amp;gt;
          &amp;lt;/li&amp;gt;
        `)
      }
    &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
`;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default t7 will attempt to check to see if React is available. If it is, t7 will automatically produce React elements as its output.
When React is not present, you can use to export it to a Universal format.
Universal DOM output should be compatible with most other virtual DOM frameworks out there, like &lt;a href=&quot;https://github.com/Raynos/mercury&quot;&gt;Mercury&lt;/a&gt;, &lt;a href=&quot;https://github.com/joelrich/citojs&quot;&gt;Cito&lt;/a&gt; and &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;Virtual-dom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To set the way you want to output you use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;t7.setOutput(t7.Outputs.React);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The supported outputs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/trueadm/inferno&quot;&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mithril.js.org/&quot;&gt;Mithril&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Universal&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>React Image Crop</title>
      <link>http://daily-javascript.com/articles/react-image-crop/</link>
      <pubDate>Mon, 12 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/react-image-crop/</guid>
      <author></author>
      <description>&lt;p&gt;react-image-crop (GitHub: &lt;a href=&quot;https://github.com/DominicTobias/react-image-crop&quot;&gt;DominicTobias/react-image-crop&lt;/a&gt;, License: ISC, npm: react-image-crop)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/DominicTobias/react-image-crop/master/crop-demo.gif&quot; style=&quot;max-width: 400px;width: 100%;left: 0;&quot;&gt;&lt;/p&gt;
&lt;p&gt;React-image-crop is a React component for client side cropping of images. This mainly got my interest because I had several moments where I needed to implement something similar.
This will take away that work in the future. I used to do the cropping server side which was a hassle. Upload the image, Getting the dimensions, crop with imagemagick then communicate that back to the browser.&lt;/p&gt;
&lt;p&gt;In hindsight I now know that there are a lot of different ways to approach this problem.&lt;/p&gt;
&lt;p&gt;What I like about react-image-crop is that it’s the basics of what you need to crop images.
It gives you an object which can be used to render the cropped image in canvas to get a base64 encoded image. Another way to display this would be via clipping it with CSS.&lt;/p&gt;
&lt;p&gt;And you guys can probably come up with a few more ways.
Let’s take a look at the setup for this component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactCrop &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'react-image-crop'&lt;/span&gt;;

&amp;lt;ReactCrop src=&lt;span class=&quot;string&quot;&gt;'path/to/image.jpg'&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you already want to add a crop, you just pass it as a prop like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crop = {
    x: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,
    y: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,
    width: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;,
    height: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;
}

&amp;lt;ReactCrop src=&lt;span class=&quot;string&quot;&gt;'path/to/image.jpg'&lt;/span&gt; crop={crop} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;crop&lt;/code&gt; object also has a property called &lt;code&gt;aspect&lt;/code&gt;. With that you can lock the aspect if the cropped area.&lt;/p&gt;
&lt;p&gt;If you want to get the dimensions to where to crop you use the &lt;code&gt;onChange&lt;/code&gt; or &lt;code&gt;onComplete&lt;/code&gt; props.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Gulp load subtasks</title>
      <link>http://daily-javascript.com/articles/gulp-load-subtasks/</link>
      <pubDate>Fri, 09 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/gulp-load-subtasks/</guid>
      <author></author>
      <description>&lt;p&gt;gulp-load-subtasks (GitHub: &lt;a href=&quot;https://github.com/skorlir/gulp-load-subtasks&quot;&gt;skorlir/gulp-load-subtasks&lt;/a&gt;, License: ISC, npm: gulp-load-subtasks)&lt;/p&gt;
&lt;p&gt;gulp-load-subtasks is a gulp “extention” which was long overdue in my opinion. The problem that it solves is that it is reducing the amount of clutter the forms inside a Gulpfile when working on big projects.&lt;/p&gt;
&lt;p&gt;This does require a bit of a shift in contrast of how we are used to writing our Gulpfile.
Normally you would do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// gulpfile.js&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'gulp'&lt;/span&gt;);

gulp.task(&lt;span class=&quot;string&quot;&gt;'some-task'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// Your stuff here&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After a while you would get stuck with one big spaggetti of tasks.
Now you can split that up into different files with their own dependencies.&lt;/p&gt;
&lt;p&gt;The file structure would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ gulpfile.js
|
+ tasks/
  + a.tasks.js
  + b.tasks.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Task A would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;gulp&lt;/span&gt;) &lt;/span&gt;{
  gulp.task(&lt;span class=&quot;string&quot;&gt;'subtaskA1'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// do things... A1&lt;/span&gt;
  })
  gulp.task(&lt;span class=&quot;string&quot;&gt;'subtaskA2'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// do things... A2&lt;/span&gt;
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And task B like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;gulp, plugins&lt;/span&gt;) &lt;/span&gt;{
  gulp.task(&lt;span class=&quot;string&quot;&gt;'subtaskB'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;comment&quot;&gt;// do things... B&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// You can use plugins!&lt;/span&gt;
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then when we get back to the Gulpfile we can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp    = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'gulp'&lt;/span&gt;),
    plugins = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'gulp-load-plugins'&lt;/span&gt;)()

$.loadSubtasks(&lt;span class=&quot;string&quot;&gt;'tasks/**/*.js'&lt;/span&gt;, gulp, plugins);

&lt;span class=&quot;comment&quot;&gt;// refer tasks in a.tasks.js and b.tasks.js&lt;/span&gt;
gulp.task(&lt;span class=&quot;string&quot;&gt;'default'&lt;/span&gt;, [ &lt;span class=&quot;string&quot;&gt;'subtaskA'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'subtaskB'&lt;/span&gt; ])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Generator Nom</title>
      <link>http://daily-javascript.com/articles/generator-nom/</link>
      <pubDate>Thu, 08 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/generator-nom/</guid>
      <author></author>
      <description>&lt;p&gt;generator-nom (GitHub: &lt;a href=&quot;https://github.com/inikulin/read-file-relative&quot;&gt;ironSource/node-generator-nom&lt;/a&gt;, License: MIT, npm: generator-nom)&lt;/p&gt;
&lt;p&gt;We all strive to write DRY code, but still while setting up projects and maintaining depenencies we are constantly repeating ourselves.
I find myself going through the same flow time and time again. &lt;code&gt;git init&lt;/code&gt;, &lt;code&gt;npm init&lt;/code&gt;, &lt;code&gt;touch README.md&lt;/code&gt;, going to Github getting an origin to push to et cetra. This process is a pain every time. What if you could just generate all this stuff with one command.&lt;/p&gt;
&lt;p&gt;That is where the &lt;code&gt;yo nom&lt;/code&gt; come in.
Nom is a &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt; generator which is a collection of several sub-generators. It includes the following generators;&lt;/p&gt;
&lt;h4 id=&quot;npm&quot;&gt;npm&lt;/h4&gt;
&lt;p&gt;Create package.json and prompt to keep dependencies of a previous package.json if any. Create .gitignore, cli.js (optional), install test framework (tape, tap, mocha, grunt, cake, or ava), add LICENSE file (MIT, BSD2 or BSD3).&lt;/p&gt;
&lt;h4 id=&quot;git&quot;&gt;git&lt;/h4&gt;
&lt;p&gt;Initialize local git repository, unless .git directory exists&lt;/p&gt;
&lt;h4 id=&quot;github&quot;&gt;github&lt;/h4&gt;
&lt;p&gt;Create public or private GitHub project, named “module-name” or “node-module-name”, unless local git already has configured remotes. Asks for access token and repository owner (which defaults to the owner of the token), skips creation if the repository already exists, adds URLs to package.json and adds remote origin.&lt;/p&gt;
&lt;h4 id=&quot;travis&quot;&gt;travis&lt;/h4&gt;
&lt;p&gt;Add .travis.yml for node 0.10 and iojs, setup GitHub hook. The travis tool asks for username and password.&lt;/p&gt;
&lt;h4 id=&quot;appveyor&quot;&gt;appveyor&lt;/h4&gt;
&lt;p&gt;Add appveyor.yml for node 0.10 and iojs, setup GitHub hook. Asks for access token.&lt;/p&gt;
&lt;h4 id=&quot;gulp&quot;&gt;gulp&lt;/h4&gt;
&lt;p&gt;Create an ES6 gulpfile and tasks directory.&lt;/p&gt;
&lt;h4 id=&quot;style-still-to-come-&quot;&gt;style (still to come)&lt;/h4&gt;
&lt;p&gt;Add standard or xo as a pretest script&lt;/p&gt;
&lt;h4 id=&quot;readme&quot;&gt;readme&lt;/h4&gt;
&lt;p&gt;Add readme.md with common sections and shield.io badges for npm and david. If you did the travis and/or appveyor setup, badges for those services will be added as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/ironSource/node-generator-nom/raw/master/demo.gif&quot; style=&quot;max-width: 400px; width: 100%; position:static;&quot;&gt;&lt;/p&gt;
&lt;p&gt;To use a specific generator you can select it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;yo nom:&amp;lt;generator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run them all use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;yo nom:*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it.&lt;/p&gt;
&lt;p&gt;I’ve tried this out and will probably be using this to make my workflow a bit more DRY and hope that other people will also consider to optimize their workflow with modules like &lt;code&gt;nom&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Read file relative</title>
      <link>http://daily-javascript.com/articles/read-file-relative/</link>
      <pubDate>Wed, 07 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/read-file-relative/</guid>
      <author></author>
      <description>&lt;p&gt;read-file-relative (GitHub: &lt;a href=&quot;https://github.com/inikulin/read-file-relative&quot;&gt;inikulin/read-file-relative&lt;/a&gt;, License: Unknown, npm: read-file-relative)&lt;/p&gt;
&lt;p&gt;A problem everybody probably encounters once in a while is relativity of file paths while reading files with Node.js.
You would do something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs   = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'path'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = fs.readFileSync(path.join(__dirname, &lt;span class=&quot;string&quot;&gt;'/data-file.txt'&lt;/span&gt;)).toString();

&lt;span class=&quot;comment&quot;&gt;// Or like:&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs   = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = fs.readFileSync(__dirname + &lt;span class=&quot;string&quot;&gt;'/data-file.txt'&lt;/span&gt;).toString();

&lt;span class=&quot;comment&quot;&gt;// Or even like this&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fs   = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = fs.readFileSync(&lt;span class=&quot;string&quot;&gt;'./data-file.txt'&lt;/span&gt;).toString();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can easily read out files without all the annoying boilerplate code.
Imagine a world where you could do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = readSync(&lt;span class=&quot;string&quot;&gt;'/data-file.txt'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well you can stop imagining, because it’s here and it’s called &lt;code&gt;read-file-relative&lt;/code&gt;.
&lt;code&gt;Read-file-relative&lt;/code&gt; comes with two main functions on it’s API: read and readSync.
Let’s take a look.&lt;/p&gt;
&lt;p&gt;To read out the file synchronously this is what you would do.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; readSync = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'read-file-relative'&lt;/span&gt;).readSync;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = readSync(&lt;span class=&quot;string&quot;&gt;'/file.txt'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you prefer asynchronously reading you just provide a callback like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; read = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'read-file-relative'&lt;/span&gt;).read;
read(&lt;span class=&quot;string&quot;&gt;'/file.txt'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'utf8'&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, content&lt;/span&gt;) &lt;/span&gt;{
   &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that for the &lt;code&gt;read&lt;/code&gt; we need to provide the encoding else it will return a buffer.&lt;/p&gt;
&lt;p&gt;Besides reading files you can also just convert a path to an absolute path like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toAbsPath = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'read-file-relative'&lt;/span&gt;).toAbsPath;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; absPath = toAbsPath(&lt;span class=&quot;string&quot;&gt;'/file.txt'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a nice addition to everybody’s toolbox. It doesn’t do much, but what it does, it does very well.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Speck JS</title>
      <link>http://daily-javascript.com/articles/speckjs/</link>
      <pubDate>Tue, 06 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/speckjs/</guid>
      <author></author>
      <description>&lt;p&gt;SpeckJS (GitHub: &lt;a href=&quot;https://github.com/speckjs/speckjs&quot;&gt;speckjs/speckjs&lt;/a&gt;, License: MIT, npm: speckjs)&lt;/p&gt;
&lt;p&gt;SpeckJS is a library that parses JavaScript comments and outputs unit-tests. SpeckJS currently supports &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt;, &lt;a href=&quot;https://github.com/jasmine/jasmine&quot;&gt;Jasmine&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;Mocha&lt;/a&gt;/&lt;a href=&quot;https://github.com/chaijs/chai&quot;&gt;Chai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SpeckJS comes with plugins for &lt;a href=&quot;https://github.com/speckjs/grunt-speckjs&quot;&gt;Grunt&lt;/a&gt;, &lt;a href=&quot;https://github.com/speckjs/gulp-speckjs&quot;&gt;Gulp&lt;/a&gt; and &lt;a href=&quot;https://github.com/speckjs/atom-speckjs&quot;&gt;Atom&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of SpeckJS is to make it as easy as possible to get started using Test-Driven Development on a new project or to quickly add unit-tests to your existing project.&lt;/p&gt;
&lt;p&gt;Let’s make a test.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*
test &amp;gt; sum function
# sum(1, 2) == 3 (returns the sum of both params)
# sum(3, 4) == 7 (returns the sum of both params)
*/&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SpeckJS supports some basic assertion like: equal, strict equal, not equal.
Besides relying on all the tools already provided, such as &lt;code&gt;gulp&lt;/code&gt; and atom plugins, you could also script yourself with the API like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; speck = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'speckjs'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// file object to be passed as an argument&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; file = {
  name: &lt;span class=&quot;string&quot;&gt;'demo.js'&lt;/span&gt;,
  content: scriptContent
};

&lt;span class=&quot;comment&quot;&gt;// options hash selecting Jasmine and specifying a callback&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; option = {
  testFW: &lt;span class=&quot;string&quot;&gt;'jasmine'&lt;/span&gt;,
  onBuild: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);
  }
}

&lt;span class=&quot;comment&quot;&gt;// Returns Jasmine test file&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = speck.build(file, option);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will start using this in my company from now on, because it makes it a lot easier to integrate testing in a long running project that has never being tested just by walking through the files.
I hope to see other people pick this up aswel.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Velocity React</title>
      <link>http://daily-javascript.com/articles/velocity-react/</link>
      <pubDate>Mon, 05 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/velocity-react/</guid>
      <author></author>
      <description>&lt;p&gt;velocity-react (GitHub: &lt;a href=&quot;https://github.com/twitter-fabric/velocity-react&quot;&gt;twitter-fabric/velocity-react&lt;/a&gt;, License: MIT, npm: velocity-react)&lt;/p&gt;
&lt;p&gt;Today I had some trouble finding something to write about. Then I remembered the awesome work done by the guys at Twitter Fabric. They made a React component for interacting with amazing &lt;a href=&quot;http://julian.com/research/velocity/&quot;&gt;Velocity&lt;/a&gt; animation library.
Offical introduction can be found &lt;a href=&quot;https://fabric.io/blog/introducing-the-velocityreact-library&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are not familiar with &lt;a href=&quot;http://julian.com/research/velocity/&quot;&gt;Velocity&lt;/a&gt; I suggest you take a look at this first.&lt;/p&gt;
&lt;p&gt;The package contains two components; &lt;code&gt;&amp;lt;VelocityComponent /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;VelocityTransitionGroup /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Velocity React integration follow this simple algorithm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Initially, an animated component will appear as it would at the end of its given animation.&lt;/li&gt;
&lt;li&gt;If that given animation ever changes, it runs it to get to the new end state. If there’s an animation currently in progress, we stop it first, and then proceed smoothly from whatever intermediate state it left us in.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a small example that was given in the introduction from Fabric.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;render: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; animationProps;
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.hovering) {
    animationProps = {
      duration: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;,
      animation: {
        rotateX: &lt;span class=&quot;number&quot;&gt;160&lt;/span&gt;
      }
    };
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
    animationProps = {
      duration: &lt;span class=&quot;number&quot;&gt;1100&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// longer due to swinging&lt;/span&gt;
      animation: {
        rotateX: [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'spring'&lt;/span&gt;]
      }
    };
  }

  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (
    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onMouseEnter&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{function&lt;/span&gt; () { &lt;span class=&quot;attribute&quot;&gt;this.setState&lt;/span&gt;({&lt;span class=&quot;attribute&quot;&gt;hovering:&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;true&lt;/span&gt;}); }}
         &lt;span class=&quot;attribute&quot;&gt;onMouseLeave&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;{function&lt;/span&gt; () { &lt;span class=&quot;attribute&quot;&gt;this.setState&lt;/span&gt;({&lt;span class=&quot;attribute&quot;&gt;hovering:&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;false&lt;/span&gt;}); }}&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;VelocityComponent&lt;/span&gt; {&lt;span class=&quot;attribute&quot;&gt;...animationProps&lt;/span&gt;}&amp;gt;&lt;/span&gt;
        {this.renderTopState()}
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;VelocityComponent&lt;/span&gt;&amp;gt;&lt;/span&gt;
      {this.renderUnderneathStats()}
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  )&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will result in:
&lt;img src=&quot;https://static1.squarespace.com/static/54ac6f9ae4b0cf1d82a4b59e/t/560a9a19e4b08fcd39795d27/1443535397904/release_summary.gif?format=300w&quot; tyle=&quot;max-width: 320px; width: 100%; position:static;&quot;&gt;&lt;/p&gt;
&lt;p&gt;As the name implies &lt;code&gt;&amp;lt;VelocityTransitionGroup /&amp;gt;&lt;/code&gt; can be used to animate a group of element at the same time. In the example on the Fabric blog we can use it being used to animate an input slider, but that’s not all. When you pay close attention you will the the toggle switch animating and a “jawbone” collapse. Al these animation are done at once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static1.squarespace.com/static/54ac6f9ae4b0cf1d82a4b59e/t/560a9a69e4b0a427e3b70022/1443535503361/?format=750w&quot; tyle=&quot;max-width: 320px; width: 100%; position:static;&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was very impressed with the work and I’m trying to push this as the new standard for animating React components at the company where I work. And will be the default for all my pet projects.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Scroller Friday</title>
      <link>http://daily-javascript.com/articles/scroller-friday/</link>
      <pubDate>Fri, 02 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/scroller-friday/</guid>
      <author></author>
      <description>&lt;p&gt;fartscroll.js (GitHub: &lt;a href=&quot;https://github.com/theonion/fartscroll.js&quot;&gt;theonion/fartscroll.js&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;Since it is Friday today my colleages and me are in a humorous mood. So when I started looking what to write about today I got some real fun suggestions.
The first one is fartscroll.js.&lt;/p&gt;
&lt;p&gt;The name already saids it all, it’s a library that makes your page fart when the user is scrolling.
Because everybody farts and likes farting, why not give your application the same privilege? Here is how:&lt;/p&gt;
&lt;p&gt;First we need to include the script within our markup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;http://code.onion.com/fartscroll.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we call it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fart every 400 pixels scrolled in the window&lt;/span&gt;
fartscroll();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you think you pages farts to often you can increase the amount of pixels that need to be scrolled before farting like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fart every 800 pixels scrolled in the window&lt;/span&gt;
fartscroll(&lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you just want to have some fun on other webpages, you can use &lt;a href=&quot;javascript:%20(function%20()%20{%20%20%20%20%20var%20fs%20=%20document.createElement('script');%20%20%20%20%20fs.setAttribute('src',%20'http://code.onion.com/fartscroll.js');%20%20%20%20%20document.head.appendChild(fs);%20%20%20%20%20window.setTimeout(function(){%20%20%20%20%20%20%20%20%20fartscroll(800);%20%20%20%20%20%20%20%20%20},%20500);%20}());&quot;&gt;this bookmarklet&lt;/a&gt;. Here is the code for it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;javascript:%20(function%20()%20{%20%20%20%20%20var%20fs%20=%20document.createElement(&amp;#39;script&amp;#39;);%20%20%20%20%20fs.setAttribute(&amp;#39;src&amp;#39;,%20&amp;#39;http://code.onion.com/fartscroll.js&amp;#39;);%20%20%20%20%20document.head.appendChild(fs);%20%20%20%20%20window.setTimeout(function(){%20%20%20%20%20%20%20%20%20fartscroll(800);%20%20%20%20%20%20%20%20%20},%20500);%20}());
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;elevator-js&quot;&gt;Elevator.js&lt;/h3&gt;
&lt;p&gt;elevator.js (GitHub: &lt;a href=&quot;https://github.com/tholman/elevator.js&quot;&gt;tholman/elevator.js&lt;/a&gt;, License: MIT)&lt;/p&gt;
&lt;p&gt;While we are in the theme of scrolling libraries, here is another fun one. I cannot say that this one is very new, but it’s still gold in my opinion. So what does it do?
Elevator.js is provides you with a “back to top” button that behaves like a real elevator. Now your users don’t have to be bored during the awkward time they spend waiting for your page to scroll back to the top. How do we use this?&lt;/p&gt;
&lt;p&gt;First we need to include the script within our markup.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://cdn.rawgit.com/tholman/elevator.js/master/elevator.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to instantiate it with some mp3 files and a trigger target like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elevator = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Elevator({
    element: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'.elevator-button'&lt;/span&gt;),
    mainAudio: &lt;span class=&quot;string&quot;&gt;'/src/to/audio.mp3'&lt;/span&gt;,
    endAudio: &lt;span class=&quot;string&quot;&gt;'/src/to/end-audio.mp3'&lt;/span&gt;
  });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you do not have any inspiration for sounds you can just use the defaults like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onload = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elevator = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Elevator({
    element: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;'.elevator-button'&lt;/span&gt;),
    duration: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// milliseconds&lt;/span&gt;
  });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>Tonic</title>
      <link>http://daily-javascript.com/articles/tonic/</link>
      <pubDate>Thu, 01 Oct 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/tonic/</guid>
      <author></author>
      <description>&lt;p&gt;During my browse session at work this morning I came across &lt;a href=&quot;https://tonicdev.com/docs/embed&quot;&gt;this post&lt;/a&gt;.
If I understand correctly the easiest way to describe Tonic is as a plugin that let’s you run Node.js in a browser.&lt;/p&gt;
&lt;p&gt;The reason why I write about this today is because of the newley released feature of embedding it on your page.
This feature can be accessed in two ways. Via HTML markup or by initializing it programatically.
Lets take a look at some examples.&lt;/p&gt;
&lt;p&gt;When you have access to the document markup we would make it work like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://embed.tonicdev.com&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-element-id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;daily-element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- anywhere else on your page --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;daily-element&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
var request = require('request');
request('http://www.google.com', function (error, response, body) {
    console.log(body) // Show the HTML for the Google homepage.
});
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this code runs Tonic it will dropdown an element showing the log output.&lt;/p&gt;
&lt;p&gt;If you do not have access to the document markup you can trigger it from Javascript like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; scriptTag = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;),
    head = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;head&quot;&lt;/span&gt;),
    dailyElement = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;'div'&lt;/span&gt;);
scriptTag.src = &lt;span class=&quot;string&quot;&gt;&quot;https://embed.tonicdev.com&quot;&lt;/span&gt;;
dailyElement.id = &lt;span class=&quot;string&quot;&gt;&quot;daily-element&quot;&lt;/span&gt;;
head.appendChild( scriptTag );

&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild( dailyElement );

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; notebook = Tonic.createNotebook({
    &lt;span class=&quot;comment&quot;&gt;// the parent element for the new notebook&lt;/span&gt;
    element: &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&quot;#daily-element&quot;&lt;/span&gt;),

    &lt;span class=&quot;comment&quot;&gt;// specify the source of the notebook&lt;/span&gt;
    source: &lt;span class=&quot;string&quot;&gt;&quot;\&quot;hello world\&quot;&quot;&lt;/span&gt;,

    &lt;span class=&quot;comment&quot;&gt;// optionally, set the notebook to be read-only&lt;/span&gt;
    readOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,

    &lt;span class=&quot;comment&quot;&gt;// optionally, provide a callback to be called when the notebook has finished loading&lt;/span&gt;
    onLoad: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{}
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On of the things I’m still missing is the ability to run ES2015. I hope that the support for that will come very soon.
This weekend I will be trying to include this within this website so you will be able to run the examples that I post right there in the browser.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Levi</title>
      <link>http://daily-javascript.com/articles/levi/</link>
      <pubDate>Mon, 28 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/levi/</guid>
      <author></author>
      <description>&lt;p&gt;Levi (GitHub: &lt;a href=&quot;https://github.com/cshum/levi&quot;&gt;cshum/levi&lt;/a&gt;, License: MIT, npm: levi)&lt;/p&gt;
&lt;p&gt;Levi is a streaming full-text search for Node.js and browsers which used LevelDB for storage.
The search implementation is done by using &lt;a href=&quot;https://en.wikipedia.org/wiki/Tf%E2%80%93idf&quot;&gt;TF-IDF&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Cosine_similarity&quot;&gt;cosine similarity&lt;/a&gt;, and it’s provided with configurable text processing pipelines: Tokenizer, Porter Stemmer and Stopwords filter.&lt;/p&gt;
&lt;p&gt;Levi is built on &lt;a href=&quot;https://github.com/Level/levelup&quot;&gt;LevelUP&lt;/a&gt; which is a fast, asynchronous, transactional storage interface. By default it uses LevelDB on Node.js, when in running in the browser it uses &lt;a href=&quot;https://github.com/maxogden/level.js&quot;&gt;IndexedDB&lt;/a&gt;. Levi supports with a variety of LevelDOWN compatible backends.&lt;/p&gt;
&lt;p&gt;In addition, Levi provides relevancy scoring for live changing data using TF-ICF - a TF-IDF approximation based on existing corpus. Such scoring matches are comparably close to TF-IDF when existing corpus is sufficiently large, with significantly better performance O(N) instead of O(N^2).&lt;/p&gt;
&lt;p&gt;Let’s take a look at the API. To get started, we need to create a new Levi instance. We do that like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; levi &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'levi'&lt;/span&gt;;

&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; lv = levi(&lt;span class=&quot;string&quot;&gt;'db'&lt;/span&gt;)
.use(levi.tokenizer())
.use(levi.stemmer())
.use(levi.stopword());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The text processing pipeline &lt;code&gt;levi.tokenizer()&lt;/code&gt;, &lt;code&gt;levi.stemmer()&lt;/code&gt;, &lt;code&gt;levi.stopword()&lt;/code&gt; are required for indexing. These are exposed as &lt;a href=&quot;https://github.com/cshum/ginga&quot;&gt;ginga&lt;/a&gt; plugins so that they can be swapped for different language configurations.&lt;/p&gt;
&lt;p&gt;Now that we have an instance we can use it to talk to the API like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;lv.put(&lt;span class=&quot;string&quot;&gt;'a'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Lorem Ipsum is simply dummy text.'&lt;/span&gt;, err =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;
 });

&lt;span class=&quot;comment&quot;&gt;// object fields as value&lt;/span&gt;
lv.put(&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, {
  id: &lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;,
  title: &lt;span class=&quot;string&quot;&gt;'Lorem Ipsum'&lt;/span&gt;,
  body: &lt;span class=&quot;string&quot;&gt;'Dummy text of the printing and typesetting industry.'&lt;/span&gt;
}, (err) =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or retrieve it like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;lv.get(&lt;span class=&quot;string&quot;&gt;'b'&lt;/span&gt;, res =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;// res here;&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To actually search we need to use Levi’s main interface which would be &lt;code&gt;searchStream&lt;/code&gt;. We use that like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;lv.searchStream(&lt;span class=&quot;string&quot;&gt;'lorem ipsum'&lt;/span&gt;).toArray(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;results&lt;/span&gt;) &lt;/span&gt;{ ... }) &lt;span class=&quot;comment&quot;&gt;// highland method&lt;/span&gt;

lv.searchStream(&lt;span class=&quot;string&quot;&gt;'lorem ipsum'&lt;/span&gt;, {
  fields: { title: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'*'&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; } &lt;span class=&quot;comment&quot;&gt;// title field boost. '*' means any field&lt;/span&gt;
}).pipe(...)

lv.searchStream(&lt;span class=&quot;string&quot;&gt;'lorem ipusm'&lt;/span&gt;, {
  fields: { title: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; }, &lt;span class=&quot;comment&quot;&gt;// title only&lt;/span&gt;
}).pipe(...)

&lt;span class=&quot;comment&quot;&gt;// ltgt&lt;/span&gt;
lv.searchStream(&lt;span class=&quot;string&quot;&gt;'lorem ipusm'&lt;/span&gt;, {
  gt: &lt;span class=&quot;string&quot;&gt;'!posts!'&lt;/span&gt;,
  lt: &lt;span class=&quot;string&quot;&gt;'!posts!~'&lt;/span&gt;
}).pipe(...)

&lt;span class=&quot;comment&quot;&gt;// document as query&lt;/span&gt;
lv.searchStream({
  title: &lt;span class=&quot;string&quot;&gt;'Lorem Ipsum'&lt;/span&gt;,
  body: &lt;span class=&quot;string&quot;&gt;'Dummy text of the printing and typesetting industry.'&lt;/span&gt;
}).pipe(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I do not fully understand everything that is going on here, I need to refer you to the extensive documentation on the &lt;a href=&quot;https://github.com/cshum/levi&quot;&gt;GitHub page&lt;/a&gt;. The reason I still mention this library is that I understand from the explanation a colleague gave me that this library will have a significant impact on the speed of your text search.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Rune.js and queryl</title>
      <link>http://daily-javascript.com/articles/runejs-and-queryl/</link>
      <pubDate>Mon, 28 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/runejs-and-queryl/</guid>
      <author></author>
      <description>&lt;p&gt;Rune.js (GitHub: &lt;a href=&quot;https://github.com/runemadsen/rune.js&quot;&gt;runemadsen/rune.js&lt;/a&gt;, License: MIT )&lt;/p&gt;
&lt;p&gt;Rune.js is a library for programming graphic design systems with SVG. It has a fluent drawing API, an unobtrusive scene graph, and a bunch of features designed specifically for graphic designers, such as: native support for color conversion, grid systems, typography, pixel iteration and an expanding set of computational geometry helpers. What peaked my interest is that it uses a &lt;a href=&quot;https://github.com/Matt-Esch/virtual-dom&quot;&gt;virtual-dom&lt;/a&gt; under the hood.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with the virtual-dom I suggest you take a break to take a look at that first.&lt;/p&gt;
&lt;p&gt;Unfortunately I could not find any npm or bower install instructions, so I am hoping that the developer will add that soon.&lt;/p&gt;
&lt;p&gt;Rune.js has all basic shapes in the API.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;r.line(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);

r.rect(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);

r.ellipse(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;);

r.circle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);

r.triangle(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And for more complex shapes it fluent API makes drawing with SVG very readable and familiar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;r.polygon(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;).lineTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);

r.path(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).lineTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).curveTo(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this library is packed with features and concepts, I will only give you the tip of the iceberg right now. If you want to know more, consult the &lt;a href=&quot;http://runemadsen.github.io/rune.js/&quot;&gt;amazing documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;queryl&quot;&gt;queryl&lt;/h3&gt;
&lt;p&gt;queryl (GitHub: &lt;a href=&quot;https://github.com/issuetrackapp/queryl&quot;&gt;issuetrackapp/queryl&lt;/a&gt;, License: MIT, npm: queryl)&lt;/p&gt;
&lt;p&gt;queryl is a query language to preform complex object searches. The purpose of this “language” is to allow the developer to build very complex queries to e.g. search a collection of objects, to validate objects before you dump it in a db or even to make assertions in tests.&lt;/p&gt;
&lt;p&gt;queryl comes with a very simple API. &lt;code&gt;queryl.match&lt;/code&gt; is the main entry at this point this will always return a boolean and expects an object to match. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;queryl.match({
  $contain: {
    foo: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
  }
}, {
  foo: [ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ]
});
&amp;gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just a very basic example of what it can do. The full API docs shows the entire power of this “language”.&lt;/p&gt;
&lt;p&gt;I can see this working very well for matching and parsing certain objects like the ones you would receive from, for instance, the Google spreadsheet API.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Clipboard.js</title>
      <link>http://daily-javascript.com/articles/clipboardjs/</link>
      <pubDate>Mon, 28 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/clipboardjs/</guid>
      <author></author>
      <description>&lt;p&gt;After writing this blog for a few days now I noticed that the bar of two libraries a day is hard to do when you have a day job next to it.
Because I want to give each library a fair shot, I will be reducing it to one library a day on workdays so I can work on updates for the website as well.&lt;/p&gt;
&lt;p&gt;Clipboard.js (GitHub: &lt;a href=&quot;https://github.com/zenorocha/clipboard.js&quot;&gt;zenorocha/clipboard.js&lt;/a&gt;, License: MIT, npm: clipboard, bower: clipboard )&lt;/p&gt;
&lt;p&gt;During my daily browse I came across Clipboard.js which is a library to put given content to the users clipboard from Javascript.
Normally we are used to implementing this behavior using Flash or some bloated framework. Luckley now there is Clipboard.js which is an 2kb implementation of “Copy to clipboard”.&lt;/p&gt;
&lt;p&gt;To use it we need to require it first. If you are using &lt;a href=&quot;http://browserify.org/&quot;&gt;Browersify&lt;/a&gt; or &lt;a href=&quot;https://webpack.github.io/&quot;&gt;Webpack&lt;/a&gt; then use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; Clipboard &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'clipboard'&lt;/span&gt;;

&lt;span class=&quot;comment&quot;&gt;// Or the old way&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Clipboard = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'clipboard'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When including it in your html do it like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;dist/clipboard.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can instantiate it using a DOM selector. For instance&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Clipboard(&lt;span class=&quot;string&quot;&gt;'.btn'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Internally, it needs to fetch all elements that match the selector and attach event listeners for each one. But what if you have hundreds of matches? Then this operation can consume a lot of memory.
Because of this it uses event delegation which replaces multiple event listeners with just a single listener.&lt;/p&gt;
&lt;p&gt;The most common usage of this library would be to copy the text value of an &lt;code&gt;input&lt;/code&gt; field or &lt;code&gt;textarea&lt;/code&gt;. This is how:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Target --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;https://github.com/zenorocha/clipboard.js.git&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Trigger --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-clipboard-target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#foo&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;assets/clippy.svg&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Copy to clipboard&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also has the ability to cut to clipboard. You would do this by attaching the &lt;code&gt;data-clipboard-action&lt;/code&gt; attribute to the trigger element like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Target --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;bar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Mussum ipsum cacilds...&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;textarea&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Trigger --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;btn&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-clipboard-action&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;cut&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;data-clipboard-target&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;#bar&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    Cut to clipboard
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you find yourself in a situation where you would like to show some feedback to the user or capture what has been selected after a copy/cut operation, you can make use of the &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; events that are being sent. You would use that like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; clipboard = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Clipboard(&lt;span class=&quot;string&quot;&gt;'.btn'&lt;/span&gt;);

clipboard.on(&lt;span class=&quot;string&quot;&gt;'success'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;'Action:'&lt;/span&gt;, e.action);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;'Text:'&lt;/span&gt;, e.text);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.info(&lt;span class=&quot;string&quot;&gt;'Trigger:'&lt;/span&gt;, e.trigger);

    e.clearSelection();
});

clipboard.on(&lt;span class=&quot;string&quot;&gt;'error'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;'Action:'&lt;/span&gt;, e.action);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.error(&lt;span class=&quot;string&quot;&gt;'Trigger:'&lt;/span&gt;, e.trigger);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The browser support on this project superised me, it relies on both Selection and execCommand APIs. The second one is supported in the following browsers.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://zenorocha.github.io/clipboard.js/assets/images/chrome.png&quot; style=&quot;width:auto; left: auto;&quot; width=&quot;48px&quot; height=&quot;48px&quot; alt=&quot;Chrome logo&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://zenorocha.github.io/clipboard.js/assets/images/firefox.png&quot; style=&quot;width:auto; left: auto;&quot; width=&quot;48px&quot; height=&quot;48px&quot; alt=&quot;Firefox logo&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://zenorocha.github.io/clipboard.js/assets/images/ie.png&quot; style=&quot;width:auto; left: auto;&quot; width=&quot;48px&quot; height=&quot;48px&quot; alt=&quot;Internet Explorer logo&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://zenorocha.github.io/clipboard.js/assets/images/opera.png&quot; style=&quot;width:auto; left: auto;&quot; width=&quot;48px&quot; height=&quot;48px&quot; alt=&quot;Opera logo&quot;&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://zenorocha.github.io/clipboard.js/assets/images/safari.png&quot; style=&quot;width:auto; left: auto;&quot; width=&quot;48px&quot; height=&quot;48px&quot; alt=&quot;Safari logo&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;42+ ✔&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;41+ ✔&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9+ ✔&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;29+ ✔&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Nope ✘&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Although copy/cut operations with execCommand aren’t supported in Safari yet (including mobile), it gracefully degrades, because Selection is supported.&lt;/p&gt;
&lt;p&gt;This means you could show a tooltip saying Copied! when success event is called and Press Ctrl+C to copy when error event is called because the text is already selected.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>XRegExp and Gun</title>
      <link>http://daily-javascript.com/articles/xregexp-and-gun/</link>
      <pubDate>Sun, 27 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/xregexp-and-gun/</guid>
      <author></author>
      <description>&lt;p&gt;XRegExp (GitHub: &lt;a href=&quot;https://github.com/slevithan/xregexp&quot;&gt;slevithan/xregexp&lt;/a&gt;, License: MIT, npm: xregexp)&lt;/p&gt;
&lt;p&gt; XRegExp is a regex utility belt that provides augmented and extensible JavaScript regular expressions.
 It comes with a new modern syntax and flags beyond what browsers support natively. Furthermore it comes with tools to make client-side grepping and string parsing easier. This will free you from worrying about cross-browser inconsistencies and problems like manually manipulating &lt;code&gt;lastIndex&lt;/code&gt; or slicing strings when tokenizing.&lt;/p&gt;
&lt;p&gt; Because XRegExp compiles to native &lt;code&gt;RegExp&lt;/code&gt; objects it’s just as fast native regular expressions.
 The only penalty would be the compiling the pattern the first time.&lt;/p&gt;
&lt;p&gt; Here are two example that the developer posted on Github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// Using named capture and flag x (free-spacing and line comments)&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; date = XRegExp(&lt;span class=&quot;string&quot;&gt;'(?&amp;lt;year&amp;gt;  [0-9]{4} ) -?  # year  \n\
                    (?&amp;lt;month&amp;gt; [0-9]{2} ) -?  # month \n\
                    (?&amp;lt;day&amp;gt;   [0-9]{2} )     # day   '&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'x'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// XRegExp.exec gives you named backreferences on the match result&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; match = XRegExp.exec(&lt;span class=&quot;string&quot;&gt;'2015-02-22'&lt;/span&gt;, date);
match.year; &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; '2015'&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// You can also pass forward and return specific backreferences&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; html = &lt;span class=&quot;string&quot;&gt;'&amp;lt;a href=&quot;http://daily-javascript.com/&quot;&amp;gt;Daily Javascript&amp;lt;/a&amp;gt;'&lt;/span&gt; +
           &lt;span class=&quot;string&quot;&gt;'&amp;lt;a href=&quot;http://www.google.com/&quot;&amp;gt;Google&amp;lt;/a&amp;gt;'&lt;/span&gt;;
XRegExp.matchChain(html, [
    {regex: &lt;span class=&quot;regexp&quot;&gt;/&amp;lt;a href=&quot;([^&quot;]+)&quot;&amp;gt;/i&lt;/span&gt;, backref: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;},
    {regex: XRegExp(&lt;span class=&quot;string&quot;&gt;'(?i)^https?://(?&amp;lt;domain&amp;gt;[^/?#]+)'&lt;/span&gt;), backref: &lt;span class=&quot;string&quot;&gt;'domain'&lt;/span&gt;}
]); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; ['daily-javascript.com', 'www.google.com']&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// Merge strings and regexes into a single pattern, safely rewriting backreferences&lt;/span&gt;
XRegExp.union([&lt;span class=&quot;string&quot;&gt;'a+b*c'&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/(dog)\1/&lt;/span&gt;, &lt;span class=&quot;regexp&quot;&gt;/(cat)\1/&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;'i'&lt;/span&gt;);
&lt;span class=&quot;comment&quot;&gt;// -&amp;gt; /a\+b\*c|(dog)\1|(cat)\2/i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also enabled some add-ons such as unicode support and then you can do this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Test the Unicode category L (Letter)&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; unicodeWord = XRegExp(&lt;span class=&quot;string&quot;&gt;'^\\pL+$'&lt;/span&gt;);
unicodeWord.test(&lt;span class=&quot;string&quot;&gt;'Русский'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;
unicodeWord.test(&lt;span class=&quot;string&quot;&gt;'日本語'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;
unicodeWord.test(&lt;span class=&quot;string&quot;&gt;'العربية'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;// Test some Unicode scripts&lt;/span&gt;
XRegExp(&lt;span class=&quot;string&quot;&gt;'^\\p{Hiragana}+$'&lt;/span&gt;).test(&lt;span class=&quot;string&quot;&gt;'ひらがな'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;
XRegExp(&lt;span class=&quot;string&quot;&gt;'^[\\p{Latin}\\p{Common}]+$'&lt;/span&gt;).test(&lt;span class=&quot;string&quot;&gt;'Über Café.'&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When installed via npm all add-ons are always available to use this in the browser. You must include to addons like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;src/xregexp.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;src/addons/unicode-base.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- This must be include before the other addons --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;src/addons/unicode-categories.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;src/addons/unicode-scripts.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;gun&quot;&gt;GUN&lt;/h3&gt;
&lt;p&gt;GUN (GitHub: &lt;a href=&quot;https://github.com/amark/gun&quot;&gt;amark/gun&lt;/a&gt;, License: Apache 2.0, npm: gun)&lt;/p&gt;
&lt;p&gt;Mark Nadal sent in GUN which is an open source alternative to Firebase.
Mark tells me that he got tired of dealing with DevOps/SysAdmin work to keep MongoDB running in production. It was making him very unhappy.
So he took it upon him self to start a DBaaS like Firebase, but one that he could run on his own servers.&lt;/p&gt;
&lt;p&gt;It looks very promising and very easy to setup. Right now it doesn’t have an efficient storage engine yet so it stores all the data in JSON.
Let’s look at some examples.&lt;/p&gt;
&lt;p&gt;To make a connection we must require it and make a reference to it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Gun = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'gun'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ref = Gun(&lt;span class=&quot;string&quot;&gt;'http://gunjs.herokuapp.com/gun'&lt;/span&gt;).get(&lt;span class=&quot;string&quot;&gt;'daily/javascript'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are able to put and get data this way.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;
&lt;span class=&quot;comment&quot;&gt;// Putting data&lt;/span&gt;
gun.put({
  username: &lt;span class=&quot;string&quot;&gt;&quot;RamonGebben&quot;&lt;/span&gt;,
  name: &lt;span class=&quot;string&quot;&gt;&quot;Ramon Gebben&quot;&lt;/span&gt;,
  email: &lt;span class=&quot;string&quot;&gt;&quot;daily-javascript@ra-ge.net&quot;&lt;/span&gt;
}).key(&lt;span class=&quot;string&quot;&gt;'usernames/RamonGebben'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// Getting data&lt;/span&gt;
gun.get(&lt;span class=&quot;string&quot;&gt;'usernames/RamonGebben'&lt;/span&gt;).val((user) =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(user.name));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also extend GUN by reacting on events like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;Gun.on(&lt;span class=&quot;string&quot;&gt;'opt'&lt;/span&gt;).event((gun, opt) =&amp;gt; {
    &lt;span class=&quot;comment&quot;&gt;/* Your module here! */&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you take a look at what the developers have planned to introduce, you will notice this is something to keep your eye on.&lt;/p&gt;
&lt;p&gt;I would not recommend using this in production just yet, because it feels very young, but for small prototype for which you don’t want to bother setting up an entire infrastructure to load and save this could be a good choice.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Jets.js and repl'em</title>
      <link>http://daily-javascript.com/articles/jetsjs-and-replem/</link>
      <pubDate>Sat, 26 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/jetsjs-and-replem/</guid>
      <author></author>
      <description>&lt;p&gt;Jets.js (GitHub: &lt;a href=&quot;https://github.com/NeXTs/Jets.js&quot;&gt;NeXTs/Jets.js&lt;/a&gt;, License: MIT, npm: jets, bower: jets)&lt;/p&gt;
&lt;p&gt;Jets.js is a search engine which utilizes CSS to present the results.
The main idea is not to affect attributes of each tag in the list while filtering.
Instead apply dynamic CSS rule in only &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag and browser will decide which item of list to show or hide. Since it’s just CSS - Jets.js may be applied to any tag, whether it’s a table or UL, OL, DIV…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://nexts.github.io/Jets.js/img/demo_hover.gif&quot; style=&quot;max-width: 400px;width: 100%;left: 0;&quot;&gt;&lt;/p&gt;
&lt;p&gt;On the developers &lt;a href=&quot;http://nexts.github.io/Jets.js/&quot;&gt;page&lt;/a&gt; there is a speed test.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SToKoIY.png&quot; style=&quot;left:0; width: 100%;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Because I was so amazed by how easy it was to setup I started a small &lt;a href=&quot;http://codepen.io/Dailjs-Javascript/pen/vNyXOr&quot;&gt;codepen&lt;/a&gt; and had some fun with it.&lt;/p&gt;
&lt;h3 id=&quot;repl-em&quot;&gt;repl’em&lt;/h3&gt;
&lt;p&gt;repl’em (GitHub: &lt;a href=&quot;https://github.com/raine/replem&quot;&gt;raine/replem&lt;/a&gt;, License: Unknown, npm: replem)&lt;/p&gt;
&lt;p&gt;If you are a developer like me you shall recognize the pain of trying a lot of different modules to find which one suits your task.
repl’em let’s you run a list of modules that use specify in a repl context.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/raine/replem/media/term.png&quot; style=&quot;left:0; width: 100%; min-height:200px;&quot;&gt;&lt;/p&gt;
&lt;p&gt;It also supports custom repl’s such as coffee-script. To use these you must give them as an argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ npm install --prefix ~/.replem coffee-script
$ replem --repl coffee-script/repl lodash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also get all module properties in the direct context. You do this by providing each module with a bang (!) argument.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ replem ramda!
Installed into REPL context:
 - ramda@&lt;span class=&quot;number&quot;&gt;0.17&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; as ramda
&amp;gt; reduce === ramda.reduce
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tool will certainly make it easier to try out new modules for providing you with new posts everyday.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Plop and Selectize</title>
      <link>http://daily-javascript.com/articles/plop-and-selectize/</link>
      <pubDate>Fri, 25 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/plop-and-selectize/</guid>
      <author></author>
      <description>&lt;p&gt;Plop (GitHub: &lt;a href=&quot;https://github.com/amwmedia/plop&quot;&gt;amwmedia/plop&lt;/a&gt;, License: MIT, npm: plop)&lt;/p&gt;
&lt;p&gt;Plop is a command line tool that helps you introduce uniformity to your team by generating new modules, files or even documentation pages.
The problem it tries to solve is one that we all must have. You have a project which is nicely structured. Lets say this is our pages folder;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|-- Pages
    |-- HomePage
        |-- HomePage.jsx
        |-- config.json
        |-- styles.css
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What we need to do is add a new page. Normally we would do is copy the &lt;code&gt;HomePage&lt;/code&gt; folder and walk through the files and what is needed. This will cost you some time and slow you down.&lt;/p&gt;
&lt;h4 id=&quot;plop-to-the-rescue&quot;&gt;Plop to the rescue&lt;/h4&gt;
&lt;p&gt;By defining how modules, pages or components should look before hand you could write a template for it.
By using &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars&lt;/a&gt; it lets you set the values you would normally change by hand.&lt;/p&gt;
&lt;p&gt;Here is an example template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class {{ properCase name }} extends React.Component {
  render(){
    return &amp;lt;div className=&amp;#39;{{ name }}&amp;#39;&amp;gt;Newly generated Component {{ name }}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To fill up this template I will need a &lt;code&gt;plopfile&lt;/code&gt; which would look like this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;plop&lt;/span&gt;) &lt;/span&gt;{
    plop.setGenerator(&lt;span class=&quot;string&quot;&gt;'component'&lt;/span&gt;, {
        description: &lt;span class=&quot;string&quot;&gt;'Generate a React Component'&lt;/span&gt;,
        prompts: [{
            type: &lt;span class=&quot;string&quot;&gt;'input'&lt;/span&gt;,
            name: &lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;,
            message: &lt;span class=&quot;string&quot;&gt;'What should it be called?'&lt;/span&gt;,
            validate: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;{
                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;regexp&quot;&gt;/.+/&lt;/span&gt;).test(value)) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; }
                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'name is required'&lt;/span&gt;;
            }
        }],
        actions: [{
            type: &lt;span class=&quot;string&quot;&gt;'add'&lt;/span&gt;,
            path: &lt;span class=&quot;string&quot;&gt;'src/Components/{{properCase name}}.jsx'&lt;/span&gt;,
            templateFile: &lt;span class=&quot;string&quot;&gt;'component.txt'&lt;/span&gt;
        }]
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you could call &lt;code&gt;plop&lt;/code&gt; to select it from a list of generators or &lt;code&gt;plop &amp;lt;generator&amp;gt;&lt;/code&gt; to call it directly.&lt;/p&gt;
&lt;p&gt;What I love about this tool is the size of it. In contrast with Yeoman which is great for initialization of a codebase but after that you are still copying files, Plop is designed to work in throughout the life entire cycle of a project.&lt;/p&gt;
&lt;h3 id=&quot;react-selectize&quot;&gt;React Selectize&lt;/h3&gt;
&lt;p&gt;React Selectize (GitHub: &lt;a href=&quot;https://github.com/furqanZafar/react-selectize&quot;&gt;furqanZafar/react-selectize&lt;/a&gt;, License: Apache 2.0, npm: react-selectize)&lt;/p&gt;
&lt;p&gt;React Selectize is a stateless Select component for ReactJS, which provides a platform for a more developer friendly SimpleSelect &amp;amp; MultiSelect component.
&lt;img src=&quot;https://camo.githubusercontent.com/251a1a6254a1a1c46074c79d7c68ec4108e0fbbe/687474703a2f2f692e696d6775722e636f6d2f72526d7566786d2e676966&quot; style=&quot;max-width: 320px; width: 100%; position:static;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Getting it to work was surprisingly simple. Here is my example&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'react'&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactSelectize &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'react-selectize'&lt;/span&gt;
const SimpleSelect = React.createFactory(ReactSelectize.SimpleSelect);
&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MultiSelect = React.createFactory(ReactSelectize.MultiSelect);

&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;SimpleSelect&lt;/span&gt;
    &lt;span class=&quot;attribute&quot;&gt;placeholder&lt;/span&gt; = &quot;&lt;span class=&quot;attribute&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;food&lt;/span&gt;&quot;
    &lt;span class=&quot;attribute&quot;&gt;onValueChange&lt;/span&gt; = {(&lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;callback&lt;/span&gt;) =&amp;gt;&lt;/span&gt; {
        alert(value);
        callback();
    }}
    &amp;gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt; = &quot;&lt;span class=&quot;attribute&quot;&gt;pizza&lt;/span&gt;&quot;&amp;gt;&lt;/span&gt;pizza&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt; = &quot;&lt;span class=&quot;attribute&quot;&gt;kebab&lt;/span&gt;&quot;&amp;gt;&lt;/span&gt;kebab&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt; = &quot;&lt;span class=&quot;attribute&quot;&gt;donut&lt;/span&gt;&quot;&amp;gt;&lt;/span&gt;donut&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;SimpleSelect&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;MultiSelect&lt;/span&gt;
    &lt;span class=&quot;attribute&quot;&gt;placeholder&lt;/span&gt; = &quot;&lt;span class=&quot;attribute&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;foods&lt;/span&gt;&quot;
    &lt;span class=&quot;attribute&quot;&gt;options&lt;/span&gt; = [&quot;&lt;span class=&quot;attribute&quot;&gt;pizza&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;attribute&quot;&gt;kebab&lt;/span&gt;&quot;, &quot;&lt;span class=&quot;attribute&quot;&gt;donut&lt;/span&gt;&quot;]&lt;span class=&quot;attribute&quot;&gt;.map&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;food&lt;/span&gt;){
        &lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; {&lt;span class=&quot;attribute&quot;&gt;label:&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;food&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;food&lt;/span&gt;};
    });
    &lt;span class=&quot;attribute&quot;&gt;onValuesChange&lt;/span&gt; = {&lt;span class=&quot;attribute&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;values&lt;/span&gt;, &lt;span class=&quot;attribute&quot;&gt;callback&lt;/span&gt;){
        &lt;span class=&quot;attribute&quot;&gt;alert&lt;/span&gt;(&lt;span class=&quot;attribute&quot;&gt;values&lt;/span&gt;);
        &lt;span class=&quot;attribute&quot;&gt;callback&lt;/span&gt;();
    }}
/&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What I love about this component is the ease of the setup and the flexibility and compactness of the API.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The start of something new.</title>
      <link>http://daily-javascript.com/articles/the_start_of_something_new/</link>
      <pubDate>Thu, 24 Sep 2015 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://daily-javascript.com/articles/the_start_of_something_new/</guid>
      <author></author>
      <description>&lt;p&gt;Since this is the first “blog post” I have ever written it will be a bit rough.
In it, I will be explaining the reason I started this blog and the goal of it.&lt;/p&gt;
&lt;h3 id=&quot;who-am-i-&quot;&gt;Who am I?&lt;/h3&gt;
&lt;p&gt;My name is Ramon Gebben. I’m 24 years young and I work as a front-end developer for a Dutch digital media company called &lt;a href=&quot;http://touchtribe.nl&quot;&gt;TouchTribe&lt;/a&gt;.
On a regular work day my work involves writing a lot of Javascript for web, server and hybrid applications.&lt;/p&gt;
&lt;h3 id=&quot;dailyjs-part-two&quot;&gt;DailyJS part two&lt;/h3&gt;
&lt;p&gt;After being a loyal subscriber to &lt;a href=&quot;http://dailyjs.com&quot;&gt;DailyJS&lt;/a&gt; for a long time, I was very disappointed to hear that &lt;a href=&quot;http://alexyoung.org/&quot;&gt;Alex Young&lt;/a&gt; stopped with DailyJS. I started noticing an absence of a similar platform.
As a front-end developer DailyJS helped me to keep up with updates from the community, such as new version from node/io.js, and to get informed about new libraries, frameworks and reviews of new build tools.&lt;/p&gt;
&lt;p&gt;Sure, we all look at &lt;a href=&quot;https://news.ycombinator.com/news&quot;&gt;Hackers News&lt;/a&gt;, &lt;a href=&quot;http://echojs.com&quot;&gt;EchoJS&lt;/a&gt; et cetera, but the nice part of DailyJS was that it was filtered and tested. Most libraries look very cool at first sight, but when you try to test them agains “real world” problems, they fail.
I want to be is the new filter. I spend a large part of my days searching for new libraries and frameworks, because it is wonderful what everybody is doing and everyday the bar is set a little higher. Normally I share the things I notice and experienced with the team I work with. Since this is very well received I thought why not take it further and give this a shot.&lt;/p&gt;
&lt;h3 id=&quot;daily-updates&quot;&gt;Daily updates&lt;/h3&gt;
&lt;p&gt;The goal of this page is giving other developers, that enjoy working with Javascript as much as I do, a daily updates about new libraries, frameworks et cetera. I will test each library that I mention and tell you about my experience. I will also try to filter out some of the “gotcha’s” to make your life easier.&lt;/p&gt;
&lt;p&gt;I will try my best to post at least two libraries a day with a small summery of what it does and what it does great.&lt;/p&gt;
&lt;p&gt;In the future I also would like see posts from developers whom in my opinion exceed in the field to give an expertise view on area and subjects that might be unclear to you and me.&lt;/p&gt;
&lt;h3 id=&quot;contribute&quot;&gt;Contribute&lt;/h3&gt;
&lt;p&gt;If you have an awesome library or you’re working on something, please let me know. In this message, enclose a Github link and maybe your motivation to start building your project.&lt;/p&gt;
&lt;p&gt;Because I’m not an experienced writer I welcome all feedback on my writing style, word choice et cetera.
Tweet to &lt;a href=&quot;https://twitter.com/DailyJavascript&quot;&gt;@DailyJavascript&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>